{
  "timestamp": "2025-08-20T01:51:19.833Z",
  "totalFiles": 8,
  "totalTexts": 702,
  "results": [
    {
      "file": "client/src/pages/Dashboard.tsx",
      "textsCount": 22,
      "texts": [
        "@tanstack/react-query",
        "react-i18next",
        "@/components/ui/card",
        "@/hooks/useLocalization",
        "p-4 space-y-6",
        "flex justify-between items-center",
        "h-8 bg-gray-200 rounded w-48 animate-pulse mb-2",
        "h-4 bg-gray-200 rounded w-64 animate-pulse",
        "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6",
        "></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const metrics = [\n    {\n      title: t('dashboard.stats.active_tickets'),\n      value: formatNumber(stats?.activeTickets || 0),\n      icon: Ticket,\n      trend:",
        ",\n    },\n    {\n      title: t('dashboard.stats.resolved_today'),\n      value: formatNumber(stats?.resolvedToday || 0),\n      icon: Clock,\n      trend:",
        ",\n    },\n    {\n      title: t('dashboard.stats.avg_resolution_time'),\n      value: `${stats?.avgResolutionTime || 0}h`,\n      icon: TrendingUp,\n      trend:",
        ",\n    },\n    {\n      title: t('dashboard.stats.online_agents'),\n      value: `${stats?.onlineAgents || 0}/${stats?.totalAgents || 0}`,\n      icon: Users,\n      trend:",
        "dashboard.stats.active_tickets",
        "dashboard.stats.resolved_today",
        "dashboard.stats.avg_resolution_time",
        "dashboard.stats.online_agents",
        "dashboard.title",
        "dashboard.welcome",
        "User",
        "${stats?.avgResolutionTime || 0}h",
        "${stats?.onlineAgents || 0}/${stats?.totalAgents || 0}"
      ]
    },
    {
      "file": "client/src/pages/Tickets.tsx",
      "textsCount": 128,
      "texts": [
        "@tanstack/react-query",
        "react-i18next",
        "@hookform/resolvers/zod",
        "],\n    retry: false,\n    onError: (error: any) => {\n      console.error('❌ [Tickets] API Error:', error);\n      toast({\n        title:",
        ",\n        description:",
        ",\n        variant:",
        ",\n      });\n    },\n  });\n\n  // Fetch customers for the dropdown\n  const { data: customersData, isLoading: customersLoading, error: customersError } = useQuery({\n    queryKey: [",
        "],\n    queryFn: async () => {\n      const response = await apiRequest(",
        ");\n  const { data: subcategoriesData } = useQuery({\n    queryKey: [",
        ", selectedCategoryId],\n    enabled: !!selectedCategoryId,\n    retry: false,\n  });\n\n  // Fetch actions based on selected subcategory\n  const [selectedSubcategoryId, setSelectedSubcategoryId] = useState<string>(",
        ");\n  const { data: actionsData } = useQuery({\n    queryKey: [",
        ",\n      customerId:",
        ",\n      beneficiaryId:",
        ",\n      subject:",
        ",\n      category:",
        ",\n      subcategory:",
        ",\n      action:",
        ",\n      priority:",
        "as const,\n      urgency:",
        "as const,\n      description:",
        ",\n      symptoms:",
        ",\n      businessImpact:",
        ",\n      workaround:",
        ",\n      location:",
        ",\n    },\n  });\n\n  // Watch for company selection to filter customers\n  const [selectedCompanyId, setSelectedCompanyId] = useState<string>(",
        ");\n  const [filteredCustomers, setFilteredCustomers] = useState<any[]>([]);\n\n  // Reset subcategory when category changes\n  useEffect(() => {\n    if (selectedCategoryId) {\n      setSelectedSubcategoryId(",
        ");\n      form.setValue(",
        ");\n    }\n  }, [selectedCategoryId]);\n\n  // Reset action when subcategory changes  \n  useEffect(() => {\n    if (selectedSubcategoryId) {\n      form.setValue(",
        ");\n    }\n  }, [selectedSubcategoryId]);\n\n  // Filter customers based on selected company\n  useEffect(() => {\n    if (!selectedCompanyId) {\n      setFilteredCustomers(customers);\n      return;\n    }\n\n    // Fetch customers for the selected company\n    const fetchCustomersForCompany = async () => {\n      try {\n        console.log('Fetching customers for company:', selectedCompanyId);\n        const response = await apiRequest(",
        "Sucesso",
        "Ticket criado com sucesso",
        "Erro",
        "Falha ao criar ticket",
        "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
        "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200",
        "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
        ": return",
        ";\n      default: return",
        ";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case",
        ";\n      case",
        ">Não foi possível carregar os tickets.</p>\n              <Button \n                onClick={() => window.location.reload()}\n                variant=",
        ">\n                  {/* Company Selection - Must be first */}\n                    <FormField\n                      control={form.control}\n                      name=",
        ">Empresa *</FormLabel>\n                          <Select \n                            onValueChange={(value) => {\n                              field.onChange(value);\n                              setSelectedCompanyId(value);\n                              // Reset customer selection when company changes\n                              form.setValue(",
        ">\n                                <SelectValue placeholder=",
        "/>\n                              </SelectTrigger>\n                            </FormControl>\n                          <SelectContent>\n                            {companies.length === 0 ? (\n                              <SelectItem value=",
        "disabled>\n                                Nenhuma empresa encontrada\n                              </SelectItem>\n                            ) : (\n                              companies.map((company: any) => (\n                                <SelectItem key={company.id} value={company.id}>\n                                  {company.name || company.company_name || company.displayName}\n                                </SelectItem>\n                              ))\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* Customer/Cliente Selection - Filtered by Company */}\n                    <FormField\n                      control={form.control}\n                      name=",
        ">\n                                <SelectValue \n                                  placeholder={\n                                    !selectedCompanyId \n                                      ?",
        "Selecione o cliente",
        "beneficiaryId",
        "Selecione o favorecido (opcional)",
        "__none__",
        "text-sm font-medium",
        "Digite o assunto do ticket",
        "{...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                  {/* 5. CATEGORIA */}\n                  <FormField\n                    control={form.control}\n                    name=",
        "render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Categoria *</FormLabel>\n                        <Select \n                          onValueChange={(value) => {\n                            field.onChange(value);\n                            setSelectedCategoryId(value);\n                          }} \n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=",
        "/>\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories.map((category: any) => (\n                              <SelectItem key={category.id} value={category.id}>\n                                {category.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* 6. SUB CATEGORIA */}\n                  <FormField\n                    control={form.control}\n                    name=",
        "render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Sub Categoria *</FormLabel>\n                        <Select \n                          onValueChange={(value) => {\n                            field.onChange(value);\n                            setSelectedSubcategoryId(value);\n                          }} \n                          value={field.value}\n                          disabled={!selectedCategoryId}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder={!selectedCategoryId ?",
        "Selecione a subcategoria",
        "Primeiro selecione uma subcategoria",
        "Selecione a ação",
        "grid grid-cols-2 gap-4",
        "Selecione a prioridade",
        "Selecione a urgência",
        "Descreva detalhadamente o problema ou solicitação",
        "Descreva os sintomas observados (opcional)",
        "businessImpact",
        "Descreva o impacto no negócio (opcional)",
        "Descreva alguma solução temporária aplicada (opcional)",
        "Selecione o local de atendimento (opcional)",
        "flex-shrink-0 flex justify-end space-x-2 pt-4 border-t bg-white dark:bg-gray-800",
        "bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700",
        "Criando...",
        "Criar Ticket",
        ">\n                      <DynamicBadge \n                        fieldName=",
        "size=",
        ">\n                        {getFieldLabel('priority', ticket.priority || 'medium')}\n                      </DynamicBadge>\n                      <DynamicBadge \n                        fieldName=",
        ">\n                    <DynamicBadge \n                      fieldName=",
        ">\n                    <span>ID: {ticket.id}</span>\n                    <span>•</span>\n                    <span>Criado: {formatDate(ticket.created_at || ticket.opened_at)}</span>\n                    {ticket.assigned_to_id && (\n                      <>\n                        <span>•</span>\n                        <span>Atribuído</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n                <Button \n                  variant=",
        "in_progress",
        "in progress",
        ";\n    return statusMapping[value.toLowerCase()] || value;\n  };\n\n  const mapPriorityValue = (value: string): string => {\n    if (!value) return",
        ";\n    return priorityMapping[value.toLowerCase()] || value;\n  };\n\n  const categoryMapping: Record<string, string> = {",
        "suporte_tecnico",
        "technical_support",
        "customer_service",
        "atendimento_cliente",
        "|| typeof value !==",
        ") {\n      return",
        ";\n    }\n    const mapped = categoryMapping[value.toLowerCase()] ||",
        "🚫 Filtering out Default company (inactive):",
        ").localeCompare(b.name || b.displayName ||",
        ");\n    });\n\n  // Debug: Check if Default company is in the list\n  console.log(",
        ", companies.map(c => ({\n    id: c.id, \n    name: c.name, \n    status: c.status,\n    isActive: c.is_active,\n    isDefault: c.name?.toLowerCase().includes(",
        ")\n  })));\n\n  console.log(",
        ", rawCompanies.length);\n  console.log(",
        ", companies.length);\n\n  // Additional debug for Default company filtering\n  const defaultCompany = rawCompanies.find((c: any) => c.name?.toLowerCase().includes(",
        "));\n  if (defaultCompany) {\n    console.log(",
        ", defaultCompany);\n    console.log(",
        ", defaultCompany.status,",
        ", defaultCompany.is_active);\n  } else {\n    console.log(",
        ");\n  }\n\n  const users = (usersData as any)?.users || [];\n\n  // Extract data for new modal fields with safe type checking\n  const favorecidos = (favorecidosData as any)?.data?.beneficiaries || (favorecidosData as any)?.favorecidos || [];\n  const locations = (locationsData as any)?.data?.locations || (locationsData as any)?.data || [];\n  const categories = (categoriesData as any)?.data || [];\n  const subcategories = (subcategoriesData as any)?.data || [];\n  const actions = (actionsData as any)?.data || [];\n\n  console.log(",
        ", { customersData, customers: customers.length });\n\n  // Form setup with new schema\n  const form = useForm<NewTicketModalData>({\n    resolver: zodResolver(newTicketModalSchema),\n    defaultValues: {\n      companyId: \"\",\n      customerId: \"\",\n      beneficiaryId: \"\",\n      subject: \"\",\n      category: \"\",\n      subcategory: \"\",\n      action: \"\",\n      priority: \"medium\" as const,\n      urgency: \"medium\" as const,\n      description: \"\",\n      symptoms: \"\",\n      businessImpact: \"\",\n      workaround: \"\",\n      location: \"\",\n    },\n  });\n\n  // Watch for company selection to filter customers\n  const [selectedCompanyId, setSelectedCompanyId] = useState<string>(\"\");\n  const [filteredCustomers, setFilteredCustomers] = useState<any[]>([]);\n\n  // Reset subcategory when category changes\n  useEffect(() => {\n    if (selectedCategoryId) {\n      setSelectedSubcategoryId(\"\");\n      form.setValue(\"subcategory\", \"\");\n      form.setValue(\"action\", \"\");\n    }\n  }, [selectedCategoryId]);\n\n  // Reset action when subcategory changes  \n  useEffect(() => {\n    if (selectedSubcategoryId) {\n      form.setValue(\"action\", \"\");\n    }\n  }, [selectedSubcategoryId]);\n\n  // Filter customers based on selected company\n  useEffect(() => {\n    if (!selectedCompanyId) {\n      setFilteredCustomers(customers);\n      return;\n    }\n\n    // Fetch customers for the selected company\n    const fetchCustomersForCompany = async () => {\n      try {\n        console.log(",
        ", data);\n\n        if (data.success && data.customers) {\n          setFilteredCustomers(data.customers);\n        } else {\n          console.warn(",
        ");\n          setFilteredCustomers(customers);\n        }\n      } catch (error) {\n        console.error(",
        ", data);\n\n    // Standardized field mapping to backend\n    const ticketData = {\n      // Core fields\n      subject: data.subject,\n      description: data.description,\n      priority: data.priority,\n      urgency: data.urgency,\n      \n      // Hierarchical classification\n      category: data.category,\n      subcategory: data.subcategory,\n      action: data.action,\n      \n      // Person relationships (standardized)\n      caller_id: data.customerId,\n      beneficiary_id: data.beneficiaryId || null,\n      company_id: data.companyId,\n      \n      // Assignment\n      assignment_group_id: data.assignmentGroup,\n      \n      // Location and context\n      location: data.location,\n      symptoms: data.symptoms || null,\n      business_impact: data.businessImpact || null,\n      workaround: data.workaround || null,\n    };\n\n    createTicketMutation.mutate(ticketData);\n  };\n\n  // Função para trocar visualização ativa\n  const handleViewChange = (viewId: string) => {\n    setCurrentViewId(viewId);\n    console.log(",
        ", tickets);\n  \n  const ticketsList = (() => {\n    if (!tickets) {\n      console.log(",
        ");\n      return [];\n    }\n    \n    // Standard Clean Architecture response structure\n    if (tickets.success && tickets.data?.tickets && Array.isArray(tickets.data.tickets)) {\n      console.log(",
        ");\n      return tickets.data.tickets;\n    }\n    \n    // Legacy support for direct data property\n    if (tickets.data?.tickets && Array.isArray(tickets.data.tickets)) {\n      console.log(",
        ");\n      return tickets.data.tickets;\n    }\n    \n    // Direct tickets array (fallback)\n    if (tickets.tickets && Array.isArray(tickets.tickets)) {\n      console.log(",
        ");\n      return tickets.tickets;\n    }\n    \n    // Raw array (ultimate fallback)\n    if (Array.isArray(tickets)) {\n      console.log(",
        ");\n      return tickets;\n    }\n    \n    console.warn(",
        ", tickets);\n    console.warn(",
        ", Object.keys(tickets || {}));\n    return [];\n  })();\n  \n  const ticketsCount = ticketsList.length;\n  \n  console.log(",
        ";\n                                    const lastName = customer.last_name || customer.lastName ||",
        ";\n                                    const fullName = customer.fullName || customer.full_name ||",
        ";\n                                    const name = customer.name ||",
        ";\n                                    \n                                    if (fullName) return fullName;\n                                    if (firstName && lastName) return `${firstName} ${lastName}`;\n                                    if (firstName) return firstName;\n                                    if (lastName) return lastName;\n                                    if (name) return name;\n                                    return customer.email ||",
        ";\n                                  })()} \n                                  {customer.email && ` (${customer.email})`}\n                                </SelectItem>\n                              ))\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {/* 3. FAVORECIDO */}\n                  <FormField\n                    control={form.control}\n                    name=\"beneficiaryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Favorecido</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Selecione o favorecido (opcional)\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"__none__\">Nenhum favorecido</SelectItem>\n                            {favorecidos.map((favorecido: any) => (\n                              <SelectItem key={favorecido.id} value={favorecido.id}>\n                                {favorecido.name || favorecido.fullName || favorecido.full_name || `${favorecido.first_name ||",
        "} ${favorecido.last_name ||",
        ", ticket.priority ||",
        ", ticket.status ||",
        ", ticket.category ||",
        ": \n                        ticket.description\n                      ).replace(/<[^>]*>/g,",
        "Sem descrição disponível",
        "${firstName} ${lastName}",
        "(${customer.email})",
        "${favorecido.first_name || ''} ${favorecido.last_name || ''}",
        "/tickets/${ticket.id}"
      ]
    },
    {
      "file": "client/src/pages/Settings.tsx",
      "textsCount": 93,
      "texts": [
        "@/hooks/useAuth",
        "@/hooks/use-toast",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/label",
        "@/components/ui/switch",
        "@/components/ui/tabs",
        "@/components/ui/select",
        "@/components/ui/textarea",
        "@/components/ui/badge",
        "@/components/ui/separator",
        "Unauthorized",
        "You are logged out. Logging in again...",
        "Settings saved",
        "Your settings have been updated successfully.",
        "/>\n                  Save Changes\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Settings Tabs */}\n          <Tabs defaultValue=",
        ">\n              <TabsTrigger value=",
        ">Profile</TabsTrigger>\n              <TabsTrigger value=",
        ">Company</TabsTrigger>\n              <TabsTrigger value=",
        ">Notifications</TabsTrigger>\n              <TabsTrigger value=",
        ">Security</TabsTrigger>\n              <TabsTrigger value=",
        ">Appearance</TabsTrigger>\n              <TabsTrigger value=",
        ">Integrations</TabsTrigger>\n            </TabsList>\n\n            {/* Profile Tab */}\n            <TabsContent value=",
        ">\n                        {user?.firstName?.charAt(0) || 'U'}\n                        {user?.lastName?.charAt(0) || 'S'}\n                      </span>\n                    </div>\n                    <div>\n                      <Button variant=",
        ">\n                        Change Avatar\n                      </Button>\n                      <Button variant=",
        ">\n                      <Label htmlFor=",
        ">First Name</Label>\n                      <Input\n                        id=",
        "defaultValue={user?.firstName || ''}\n                        placeholder=",
        ">Last Name</Label>\n                      <Input\n                        id=",
        "defaultValue={user?.lastName || ''}\n                        placeholder=",
        ">Email</Label>\n                      <Input\n                        id=",
        "type=",
        "defaultValue={user?.email || ''}\n                        placeholder=",
        ">Phone</Label>\n                      <Input\n                        id=",
        "placeholder=",
        ">\n                    <Label htmlFor=",
        ">Bio</Label>\n                    <Textarea\n                      id=",
        ">Role</Label>\n                    <Select defaultValue={user?.role || 'agent'}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=",
        ">Administrator</SelectItem>\n                        <SelectItem value=",
        ">Agent</SelectItem>\n                        <SelectItem value=",
        ">Supervisor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Company Tab */}\n            <TabsContent value=",
        ">Company Name</Label>\n                      <Input\n                        id=",
        "defaultValue=",
        ">Website</Label>\n                      <Input\n                        id=",
        ">Industry</Label>\n                      <Select defaultValue=",
        ">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=",
        ">Technology</SelectItem>\n                          <SelectItem value=",
        ">Finance</SelectItem>\n                          <SelectItem value=",
        ">Healthcare</SelectItem>\n                          <SelectItem value=",
        ">Retail</SelectItem>\n                          <SelectItem value=",
        ">Company Size</Label>\n                      <Select defaultValue=",
        ">1-10 employees</SelectItem>\n                          <SelectItem value=",
        ">11-50 employees</SelectItem>\n                          <SelectItem value=",
        ">50-200 employees</SelectItem>\n                          <SelectItem value=",
        ">Address</Label>\n                    <Textarea\n                      id=",
        ">\n                      {[\n                        { name:",
        ", email:",
        ", role:",
        "},\n                        { name:",
        ">\n                            <Badge variant=",
        ">{member.role}</Badge>\n                            <Button variant=",
        "size=",
        "/>\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    <Button variant=",
        "/>\n                      Invite Team Member\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Notifications Tab */}\n            <TabsContent value=",
        ">\n                          Receive weekly performance reports\n                        </p>\n                      </div>\n                      <Switch />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Security Tab */}\n            <TabsContent value=",
        ">\n                        <Input\n                          id=",
        "type={showPassword ?",
        "Enter current password",
        ">New Password</Label>\n                      <Input\n                        id=",
        ">Confirm Password</Label>\n                      <Input\n                        id=",
        ">\n                          Add an extra layer of security to your account\n                        </p>\n                      </div>\n                      <Button variant=",
        ">\n                          Automatically log out after period of inactivity\n                        </p>\n                      </div>\n                      <Select defaultValue=",
        ">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=",
        ">15 minutes</SelectItem>\n                          <SelectItem value=",
        ">30 minutes</SelectItem>\n                          <SelectItem value=",
        ">1 hour</SelectItem>\n                          <SelectItem value=",
        ">\n                      {[\n                        { device:",
        ", location:",
        ", current: true },\n                        { device:",
        ", current: false },\n                        { device:",
        ">\n                              {session.device}\n                              {session.current && <Badge variant=",
        ">{session.location}</p>\n                          </div>\n                          {!session.current && (\n                            <Button variant=",
        "/>\n                              Revoke\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Appearance Tab */}\n            <TabsContent value=",
        ">\n                          Enable smooth transitions for sidebar interactions\n                        </p>\n                      </div>\n                      <Switch defaultChecked />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Integrations Tab */}\n            <TabsContent value=",
        ">\n                    {[\n                      { name:",
        ", description:",
        ", connected: true },\n                      { name:",
        ", connected: false },\n                      { name:",
        ">{integration.name}</h4>\n                          {integration.connected ? (\n                            <Badge variant=",
        "/>\n                              Connected\n                            </Badge>\n                          ) : (\n                            <Button variant=",
        "}\n                        {user?.lastName?.charAt(0) ||",
        ").map(n => n[0]).join("
      ]
    },
    {
      "file": "client/src/pages/Reports.tsx",
      "textsCount": 96,
      "texts": [
        "@tanstack/react-query",
        "@/components/ui/button",
        "@/components/ui/input",
        "@/components/ui/card",
        "@/components/ui/tabs",
        "@/components/ui/badge",
        "@/components/ui/select",
        "@/components/ui/separator",
        "@/components/ui/dropdown-menu",
        "@/components/ui/tooltip",
        "@/components/ui/sheet",
        "@/components/ui/dialog",
        "@/hooks/use-toast",
        "@/lib/queryClient",
        "Ticket Volume",
        "Track ticket creation trends over time",
        "Performance",
        "bg-blue-500",
        "2 min",
        "Agent Performance",
        "Monitor agent productivity and resolution rates",
        "Team",
        "bg-green-500",
        "3 min",
        "SLA Compliance",
        "Track SLA breaches and response times",
        "bg-orange-500",
        "Customer Satisfaction",
        "Analyze CSAT scores and feedback trends",
        "Customer",
        "bg-purple-500",
        "4 min",
        "Tickets",
        "Support tickets and related data",
        "text-blue-600",
        "Users",
        "Customer and agent information",
        "text-green-600",
        "Organizations",
        "Company and group data",
        "text-purple-600",
        "Chat",
        "Live chat conversations",
        "text-orange-600",
        ");\n  const [activeView, setActiveView] = useState(",
        "); // explore, reports, dashboards\n  const [selectedCategory, setSelectedCategory] = useState(",
        ");\n  const [viewMode, setViewMode] = useState(",
        "); // grid, list\n  const [showFilters, setShowFilters] = useState(false);\n  const [showQuickStart, setShowQuickStart] = useState(true);\n\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Fetch existing reports\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: [",
        "],\n    queryFn: () => apiRequest(",
        ", name:",
        ", count: reports.length },\n    { id:",
        ", count: reports.filter(r => r.category === 'operational').length },\n    { id:",
        ", count: reports.filter(r => r.category === 'hr').length },\n    { id:",
        ", count: reports.filter(r => r.category === 'analytical').length },\n    { id:",
        ", count: reports.filter(r => r.category === 'compliance').length }\n  ];\n\n  // Filter reports based on search and category\n  const filteredReports = reports.filter(report => {\n    const matchesSearch = report.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         report.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || \n                           (selectedCategory === 'performance' && report.category === 'operational') ||\n                           (selectedCategory === 'team' && report.category === 'hr') ||\n                           (selectedCategory === 'customer' && report.category === 'analytical') ||\n                           (selectedCategory === 'compliance' && report.category === 'compliance');\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleCreateFromTemplate = (templateId: string) => {\n    setLocation(`/reports/create?template=${templateId}`);\n  };\n\n  const handleEditReport = (reportId: string) => {\n    setLocation(`/reports/edit/${reportId}`);\n  };\n\n  const handleViewReport = (reportId: string) => {\n    setLocation(`/reports/view/${reportId}`);\n  };\n\n  // Zendesk-style Explore Landing\n  if (activeView ===",
        ">Explore</h1>\n                <Badge variant=",
        ">\n                <Button \n                  variant=",
        "size=",
        "onClick={() => setActiveView(",
        ">Get insights in minutes with pre-built reports</p>\n                </div>\n                <Button \n                  variant=",
        "/>\n                        </div>\n                        <Badge variant=",
        ">{template.description}</p>\n                      <Badge variant=",
        ">Choose your data to start building</p>\n              </div>\n              <Button variant=",
        ">Recent activity</h2>\n              <Button \n                variant=",
        ">\n                      <Badge variant={report.status === 'active' ? 'default' : 'secondary'}>\n                        {report.status}\n                      </Badge>\n                      <Button \n                        variant=",
        ">\n              <Button \n                variant=",
        "/>\n                Back to Explore\n              </Button>\n              <Separator orientation=",
        ">\n                  <TabsTrigger value=",
        ">Reports</TabsTrigger>\n                  <TabsTrigger value=",
        ">\n                <Button\n                  variant={viewMode === 'grid' ? 'default' : 'outline'}\n                  size=",
        "/>\n                </Button>\n                <Button\n                  variant={viewMode === 'list' ? 'default' : 'outline'}\n                  size=",
        "/>\n              <Input\n                placeholder=",
        ">\n                <SelectValue placeholder=",
        "/>\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map((category) => (\n                  <SelectItem key={category.id} value={category.id}>\n                    {category.name} ({category.count})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <Button\n              variant=",
        ">{report.description}</p>\n            </div>\n          </div>\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=",
        "/>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=",
        ">\n            <Button variant=",
        "/>}\n        <Button variant=",
        "/>\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=",
        "/>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=",
        ").length },\n    { id: \"customer\", name: \"Customer Insights\", count: reports.filter(r => r.category ===",
        ").length },\n    { id: \"compliance\", name: \"Compliance\", count: reports.filter(r => r.category ===",
        ").length }\n  ];\n\n  // Filter reports based on search and category\n  const filteredReports = reports.filter(report => {\n    const matchesSearch = report.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         report.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory ===",
        "|| \n                           (selectedCategory ===",
        "&& report.category ===",
        ") ||\n                           (selectedCategory ===",
        "/reports/create",
        ": return BarChart3;\n      case",
        ": return LineChart;\n      case",
        ": return PieChart;\n      case",
        "/reports/create?template=${templateId}",
        "/reports/edit/${reportId}",
        "/reports/view/${reportId}",
        "p-3 rounded-lg ${template.color} text-white mb-4",
        "/reports/create?datasource=${source.id}",
        "h-8 w-8 ${source.color} mr-3"
      ]
    },
    {
      "file": "client/src/pages/Customers.tsx",
      "textsCount": 74,
      "texts": [
        "@tanstack/react-query",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/badge",
        "@/components/ui/avatar",
        "@/components/ui/table",
        "@/components/ui/dropdown-menu",
        "@/components/CustomerModal",
        "@/utils/addressFormatter",
        ">\n              <Button\n                onClick={() => window.location.reload()}\n                variant=",
        ">\n                🔄 Tentar novamente\n              </Button>\n              {isSchemaError && (\n                <Button\n                  onClick={() => setLocation('/settings')}\n                  variant=",
        ">\n                  ⚙️ Verificar configurações\n                </Button>\n              )}\n              <Button\n                onClick={() => setLocation('/dashboard')}\n                variant=",
        ">\n          <Button variant=",
        ">\n                        {getInitials(customer) ||",
        ">\n                      {new Date(customer.created_at).toLocaleDateString('pt-BR')}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=",
        "size=",
        "/>\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=",
        "../lib/queryClient",
        "Customers API Response:",
        "[CUSTOMERS] Data structure:",
        "no data",
        "[CUSTOMERS] Invalid customer object:",
        "first_name",
        "firstName",
        "last_name",
        "lastName",
        "customer_type",
        "customerType",
        "company_name",
        "companyName",
        "mobile_phone",
        "mobilePhone",
        "zip_code",
        "zipCode",
        "is_active",
        "isActive",
        "full_name",
        "fullName",
        ") {\n        return value;\n      }\n    }\n\n    // Return appropriate defaults\n    switch (field) {\n      case",
        ":\n        return",
        ";\n      case",
        ":\n        return true;\n      case",
        ":\n      case",
        ";\n      default:\n        return null;\n    }\n  };\n\n  console.log(",
        ", { customers, total, error, isLoading });\n\n  const handleAddCustomer = () => {\n    setSelectedCustomer(null);\n    setIsCustomerModalOpen(true);\n  };\n\n  const normalizeCustomerStatus = (customer: any) => {\n    return {\n      ...customer,\n      status: customer.status ===",
        "Ativo",
        "Inativo",
        "/locations",
        ")) {\n      const parts = fullName.split(",
        ");\n      return `${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}`.toUpperCase();\n    }\n    if (firstName) {\n      return firstName.charAt(0).toUpperCase();\n    }\n    if (lastName) {\n      return lastName.charAt(0).toUpperCase();\n    }\n    if (name) {\n      return name.charAt(0).toUpperCase();\n    }\n    if (customer.email) {\n      return customer.email.charAt(0).toUpperCase();\n    }\n    return \"?\";\n  };\n\n  // Simplified company display component\n  const CompanyDisplay = ({ companies }: { companies: string | null | undefined }) => {\n    if (!companies || companies ===",
        "|| companies ===",
        "&& companies !== null) {\n      if (Array.isArray(companies)) {\n        displayText = companies.filter(Boolean).join(",
        ";\n      } else {\n        const values = Object.values(companies as Record<string, any>).filter(Boolean);\n        displayText = values.length > 0 ? values.join(",
        ";\n    const isSchemaError = [",
        "MISSING_COLUMNS",
        "MISSING_COLUMN",
        "PERMISSION_DENIED",
        "text-orange-500",
        "text-red-500",
        "🗄️ Problema de Esquema de Banco",
        "🔒 Problema de Permissão",
        "❌ Erro ao carregar clientes",
        "Não foi possível carregar os dados dos clientes.",
        "/settings",
        "/dashboard",
        ") {\n                        const companyName = getCustomerField(customer,",
        "}\n                          </div>\n                        );\n                      } else if (customerType ===",
        ");\n                      } else if (typeof companies ===",
        "|| customer.status ===",
        "|| customer.isActive === true\n                            ?",
        "pt-BR",
        "${firstName.charAt(0)}${lastName.charAt(0)}",
        "${parts[0].charAt(0)}${parts[parts.length - 1].charAt(0)}",
        "mb-4 ${isPermissionError ? 'text-orange-500' : 'text-red-500'}"
      ]
    },
    {
      "file": "client/src/pages/Analytics.tsx",
      "textsCount": 72,
      "texts": [
        "@tanstack/react-query",
        "@/hooks/useAuth",
        "@/hooks/use-toast",
        "@/lib/authUtils",
        "@/components/ui/card",
        "@/components/ui/button",
        "@/components/ui/select",
        "@/components/ui/tabs",
        "@/components/ui/progress",
        "@/components/ui/badge",
        "@/types",
        "Email",
        "bg-blue-500",
        "Chat",
        "bg-green-500",
        "Phone",
        "bg-yellow-500",
        "Social",
        "bg-purple-500",
        ", score: 92 },\n  { month:",
        ", score: 89 },\n  { month:",
        ", score: 94 },\n  { month:",
        ", score: 91 },\n  { month:",
        ", score: 96 },\n  { month:",
        ", score: 94 },\n];\n\nconst agentPerformance = [\n  { name:",
        ", resolved: 156, avgTime:",
        ", satisfaction: 97 },\n  { name:",
        ", resolved: 142, avgTime:",
        ", satisfaction: 94 },\n  { name:",
        ", resolved: 138, avgTime:",
        ", satisfaction: 95 },\n  { name:",
        ", resolved: 124, avgTime:",
        ", satisfaction: 92 },\n  { name:",
        ", resolved: 119, avgTime:",
        ", satisfaction: 93 },\n];\n\nconst topIssues = [\n  { issue:",
        ", count: 89, trend:",
        "},\n  { issue:",
        ", count: 67, trend:",
        ", count: 56, trend:",
        ", count: 45, trend:",
        ", count: 34, trend:",
        ",\n        description:",
        ",\n        variant:",
        ",\n      });\n      setTimeout(() => {\n        window.location.href =",
        ";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stats, isLoading: statsLoading, error } = useQuery<DashboardStats>({\n    queryKey: [",
        "],\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title:",
        ">\n                  <Select defaultValue=",
        ">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=",
        ">Last 7 days</SelectItem>\n                      <SelectItem value=",
        ">Last 30 days</SelectItem>\n                      <SelectItem value=",
        ">Last 90 days</SelectItem>\n                      <SelectItem value=",
        ">Last year</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button variant=",
        "/>\n                    Export\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Analytics Tabs */}\n          <Tabs defaultValue=",
        ">\n              <TabsTrigger value=",
        ">Overview</TabsTrigger>\n              <TabsTrigger value=",
        ">Performance</TabsTrigger>\n              <TabsTrigger value=",
        ">Channels</TabsTrigger>\n              <TabsTrigger value=",
        ">Trends</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=",
        ">\n                              {channel.value}%\n                            </span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Performance Tab */}\n            <TabsContent value=",
        ">\n                            <Badge variant={agent.satisfaction > 95 ?",
        "space-y-4",
        "flex items-center justify-between",
        "flex items-center space-x-3",
        "w-6 h-6 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center",
        "text-xs font-medium text-gray-600 dark:text-gray-400",
        "font-medium text-gray-900 dark:text-white",
        "flex items-center space-x-2",
        "text-sm text-gray-600 dark:text-gray-400",
        "/>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Channels Tab */}\n            <TabsContent value=",
        ">\n                          of total volume\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Trends Tab */}\n            <TabsContent value=",
        ").map(n => n[0]).join(",
        "w-3 h-3 rounded-full ${channel.color}"
      ]
    },
    {
      "file": "client/src/components/layout/Header.tsx",
      "textsCount": 27,
      "texts": [
        "@/components/ui/button",
        "@/components/ui/dropdown-menu",
        "@/components/ui/avatar",
        "@/hooks/useAuth",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "relative z-10 flex-shrink-0 flex h-16 bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700",
        "h-5 w-5",
        "flex items-center space-x-4",
        ">\n            <Button\n              variant=",
        ">Dashboard</span>\n            </Button>\n          </Link>\n          <Link href=",
        ">Tickets</span>\n            </Button>\n          </Link>\n          <Link href=",
        ">\n          {/* Timecard Working Status - Only visible when user is working */}\n          {isWorking && (\n            <Button\n              variant=",
        "size=",
        "onClick={() => setLocation('/timecard')}\n              title=",
        "></span>\n            </Button>\n          )}\n\n          {/* Notifications */}\n          <Button\n            variant=",
        "></span>\n          </Button>\n\n          {/* User Profile Dropdown */}\n          {user && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=",
        ">\n                    <AvatarImage \n                      src={userProfile?.avatar || userProfile?.avatar_url ||",
        "align=",
        ">\n                      {userProfile?.role || user?.role}\n                    </p>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=",
        ">Idioma</div>\n                  <LanguageSelector variant=",
        "@/components/LanguageSelector",
        "/timecard",
        "ring-2 ring-yellow-400 ring-offset-2 ring-offset-white dark:ring-offset-gray-800 shadow-lg shadow-yellow-400/50",
        "relative h-8 w-8 rounded-full p-0 ${\n                    isWorking \n                      ? 'ring-2 ring-yellow-400 ring-offset-2 ring-offset-white dark:ring-offset-gray-800 shadow-lg shadow-yellow-400/50' \n                      : ''\n                  }",
        "${userProfile?.firstName || user?.firstName} ${userProfile?.lastName || user?.lastName}",
        "${userProfile?.firstName || user?.firstName} ${userProfile?.lastName || user?.lastName || ''}"
      ]
    },
    {
      "file": "client/src/components/layout/Sidebar.tsx",
      "textsCount": 190,
      "texts": [
        "@/lib/utils",
        "@/components/ui/button",
        "@/components/ui/badge",
        "@/components/ui/collapsible",
        "@/hooks/useAuth",
        "@tanstack/react-query",
        "@/lib/queryClient",
        "@/hooks/useEmploymentDetection",
        "Clientes",
        "/customers",
        "Tickets",
        "/tickets",
        "Base de Conhecimento",
        "/knowledge-base",
        "Controle de Jornadas",
        "Registro de Ponto",
        "/timecard",
        "Escalas de Trabalho",
        "/work-schedules",
        "Banco de Horas",
        "/hour-bank",
        "Calendário de Feriados",
        "/holiday-calendar",
        "Relatórios",
        "/timecard-reports",
        "CLT Compliance",
        "/clt-compliance",
        "Aprovação de Registros",
        "/timecard-approvals",
        "Configuração de Aprovações",
        "/timecard-approval-settings",
        "Gestão de Ausências",
        "/absence-management",
        "Templates de Escalas",
        "/schedule-templates",
        "Locais",
        "/locations",
        "Materiais e Serviços",
        "Catálogo de Itens",
        "/item-catalog",
        "Gestão de Estoque",
        "/stock-management",
        "Gestão de Fornecedores",
        "/supplier-management",
        "Controle de Ativos",
        "/asset-management",
        "LPU - Lista de Preços",
        "/lpu-management",
        "Gestão de Compliance",
        "/compliance-management",
        "Analytics",
        "/analytics",
        "Notificações",
        "/notifications",
        "Compliance",
        "/compliance",
        "GDPR Compliance",
        "/gdpr-compliance",
        "Reports",
        "Productivity Reports",
        "/productivity-reports",
        "Team Performance",
        "/team-performance",
        "System Analytics",
        "/system-analytics",
        "SaaS Admin",
        "Dashboard",
        "/saas-admin",
        "Gestão de Tenants",
        "/saas-admin/tenants",
        "Performance & Saúde",
        "/saas-admin/performance",
        "Configurações de Segurança",
        "/saas-admin/security",
        "Billing & Usage",
        "/saas-admin/billing",
        "Disaster Recovery",
        "/saas-admin/disaster-recovery",
        "Auto-Provisioning",
        "/tenant-provisioning",
        "Gerenciar Traduções",
        "/translation-manager",
        "Gestão de Usuários",
        "/user-management",
        "Integrações",
        "/saas-admin/integrations",
        "Controle de Integridade",
        "/module-integrity",
        "Multilocation Settings",
        "/tenant-admin/multilocation",
        "Workspace Admin",
        "Geral",
        "/tenant-admin/geral",
        "Gestão de Equipe",
        "/team-management",
        "Gestão de Contratos",
        "/contract-management",
        "Gestão de Despesas Corporativas",
        "/expense-management",
        "/materials-services-control",
        "Habilidades Técnicas",
        "/technical-skills",
        "Workflows",
        "/tenant-admin/workflows",
        "SLAs",
        "/slas",
        "Aprovações",
        "/approvals",
        "Planejador de Atividades",
        "/activity-planner",
        "/tenant-admin/integrations",
        "Configurações de Tickets",
        "/ticket-configuration",
        "Templates de Tickets",
        "/ticket-templates",
        "Campos Customizados",
        "/custom-fields-admin",
        "Favorecidos",
        "/tenant-admin/beneficiaries",
        "Formulários Internos",
        "/internal-forms",
        "OmniBridge",
        "/omnibridge",
        "Empresas",
        "/companies",
        "Branding & Personalização",
        "/tenant-admin/branding",
        "Relatórios & Dashboards",
        "/reports",
        "Dashboards Interativos",
        "/dashboards",
        "Settings",
        "/settings",
        "Security",
        "/security",
        "Help & Support",
        "/help",
        "flex flex-col flex-grow pt-5 pb-4 overflow-y-auto",
        "text-xl font-bold text-white transition-opacity duration-300",
        "title=",
        ">\n            <Button\n              variant=",
        "size=",
        ",\n                      hasActiveChild\n                        ?",
        "text-white hover:bg-white hover:bg-opacity-20",
        "h-6 w-6 flex-shrink-0",
        "absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center",
        "text-xs font-bold text-white",
        "text-white hover:bg-white hover:bg-opacity-10",
        "mr-3 h-4 w-4 flex-shrink-0",
        ",\n                            isActive\n                              ?",
        "text-white shadow-lg",
        "pt-4 mt-4 border-t border-white border-opacity-20",
        "text-xs text-white text-opacity-70 uppercase tracking-wider font-medium",
        "relative group",
        "ml-auto h-4 w-4",
        "ml-4 mt-1 space-y-1",
        "Aparência",
        "/layouts",
        "group flex items-center rounded-md transition-all duration-300 cursor-pointer relative",
        "flex-shrink-0 flex border-t border-white border-opacity-20",
        "flex items-center justify-center p-3 transition-all duration-300",
        "saas_admin",
        "tenant_admin",
        "/timecard-autonomous",
        "Controle de Jornada",
        "lg:w-16",
        "lg:w-64",
        "linear-gradient(135deg, var(--primary), var(--secondary))",
        "justify-center w-full",
        "w-8 h-8 mr-3",
        "w-6 h-6",
        "w-5 h-5",
        "}`} style={{\n            backgroundColor:",
        ",\n            borderColor:",
        "w-6 h-6 mr-2",
        "Carregando...",
        ",\n                      color:",
        ",\n                            color:",
        ",\n                    color:",
        ",\n                  color:",
        "var(--accent)",
        "hidden lg:flex lg:flex-col transition-all duration-300 ${\n      collapsed ? 'lg:w-16' : 'lg:w-64'\n    }",
        "flex items-center transition-all duration-300 ${\n            collapsed ? 'justify-center w-full' : ''\n          }",
        "bg-white rounded-lg flex items-center justify-center transition-all duration-300 ${\n              collapsed ? 'w-10 h-10' : 'w-8 h-8 mr-3'\n            }",
        "text-purple-600 transition-all duration-300 ${\n                collapsed ? 'w-6 h-6' : 'w-5 h-5'\n              }",
        "rounded-lg border transition-all duration-300 ${\n            collapsed ? 'p-2' : 'p-3'\n          }",
        "flex items-center transition-all duration-300 ${\n              collapsed ? 'justify-center' : 'justify-between'\n            }",
        "flex items-center transition-all duration-300 ${\n                collapsed ? 'justify-center' : ''\n              }",
        "bg-white rounded-full flex items-center justify-center transition-all duration-300 ${\n                  collapsed ? 'w-8 h-8' : 'w-6 h-6 mr-2'\n                }",
        "font-semibold text-purple-600 transition-all duration-300 ${\n                    collapsed ? 'text-sm' : 'text-xs'\n                  }"
      ]
    }
  ]
}