
import pkg from 'pg';
const { Pool } = pkg;

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function insertRealLocationsData() {
  console.log('üöÄ Inserindo dados reais de locais no banco de dados...');
  
  const tenantId = '3f99462f-3621-4b1b-bea8-782acc50d62e';
  const schemaName = `tenant_${tenantId.replace(/-/g, '_')}`;
  
  try {
    // Garantir que o schema existe
    await pool.query(`CREATE SCHEMA IF NOT EXISTS "${schemaName}"`);
    
    // Criar tabelas se n√£o existirem
    await pool.query(`SELECT create_locations_new_tables_for_tenant('${schemaName}')`);
    
    // 1. INSERIR LOCAIS REAIS
    console.log('üìç Inserindo locais reais...');
    const locaisInsertQuery = `
      DELETE FROM "${schemaName}".locais WHERE tenant_id = $1;
      INSERT INTO "${schemaName}".locais (
        tenant_id, ativo, nome, descricao, codigo_integracao,
        email, ddd, telefone, cep, pais, estado, municipio, bairro,
        tipo_logradouro, logradouro, numero, complemento,
        latitude, longitude, fuso_horario
      ) VALUES 
      ($1, true, 'Sede S√£o Paulo', 'Escrit√≥rio principal da empresa', 'LOC-SP-001',
       'contato.sp@empresa.com', '11', '1134567890', '01310-100', 'Brasil', 'SP', 'S√£o Paulo', 'Bela Vista',
       'Avenida', 'Avenida Paulista', '1578', 'Conjunto 142',
       -23.5629, -46.6544, 'America/Sao_Paulo'),
      ($1, true, 'Filial Rio de Janeiro', 'Unidade operacional do Rio', 'LOC-RJ-001',
       'contato.rj@empresa.com', '21', '2134567890', '20040-020', 'Brasil', 'RJ', 'Rio de Janeiro', 'Centro',
       'Avenida', 'Avenida Rio Branco', '156', '10¬∫ andar',
       -22.9035, -43.2096, 'America/Sao_Paulo'),
      ($1, true, 'Centro Distribui√ß√£o Campinas', 'CD principal interior SP', 'LOC-CP-001',
       'cd.campinas@empresa.com', '19', '1934567890', '13015-200', 'Brasil', 'SP', 'Campinas', 'Vila Industrial',
       'Rua', 'Rua das Ind√∫strias', '500', null,
       -22.9099, -47.0626, 'America/Sao_Paulo'),
      ($1, true, 'Dep√≥sito Guarulhos', 'Dep√≥sito secund√°rio regi√£o metropolitana', 'LOC-GU-001',
       'deposito.guarulhos@empresa.com', '11', '1123456789', '07034-911', 'Brasil', 'SP', 'Guarulhos', 'Vila Galv√£o',
       'Rua', 'Rua Industrial Norte', '1200', 's/n',
       -23.4543, -46.5249, 'America/Sao_Paulo'),
      ($1, true, 'Posto Avan√ßado Santos', 'Atendimento porto de Santos', 'LOC-ST-001',
       'santos@empresa.com', '13', '1334567890', '11013-560', 'Brasil', 'SP', 'Santos', 'Centro',
       'Rua', 'Rua XV de Novembro', '95', '2¬∫ andar',
       -23.9537, -46.3307, 'America/Sao_Paulo');
    `;
    
    await pool.query(locaisInsertQuery, [tenantId]);
    console.log('‚úÖ Locais inseridos com sucesso');

    // 2. INSERIR REGI√ïES REAIS
    console.log('üó∫Ô∏è Inserindo regi√µes reais...');
    const regioesInsertQuery = `
      DELETE FROM "${schemaName}".regioes WHERE tenant_id = $1;
      INSERT INTO "${schemaName}".regioes (
        tenant_id, ativo, nome, descricao, codigo_integracao,
        latitude, longitude, cep, pais, estado, municipio, bairro
      ) VALUES 
      ($1, true, 'Regi√£o Metropolitana SP', 'Grande S√£o Paulo e arredores', 'REG-RMSP-001',
       -23.5505, -46.6333, '01000-000', 'Brasil', 'SP', 'S√£o Paulo', 'Centro'),
      ($1, true, 'Regi√£o Sul RJ', 'Zona Sul do Rio de Janeiro', 'REG-RJ-SUL-001',
       -22.9068, -43.1729, '22000-000', 'Brasil', 'RJ', 'Rio de Janeiro', 'Copacabana'),
      ($1, true, 'Interior Paulista', 'Campinas e regi√£o', 'REG-INT-SP-001',
       -22.9099, -47.0626, '13000-000', 'Brasil', 'SP', 'Campinas', 'Centro'),
      ($1, true, 'Baixada Santista', 'Santos e litoral sul SP', 'REG-BS-001',
       -23.9537, -46.3307, '11000-000', 'Brasil', 'SP', 'Santos', 'Centro'),
      ($1, true, 'ABC Paulista', 'Santo Andr√©, S√£o Bernardo e S√£o Caetano', 'REG-ABC-001',
       -23.6821, -46.5649, '09000-000', 'Brasil', 'SP', 'Santo Andr√©', 'Centro');
    `;
    
    await pool.query(regioesInsertQuery, [tenantId]);
    console.log('‚úÖ Regi√µes inseridas com sucesso');

    // 3. INSERIR ROTAS DIN√ÇMICAS REAIS
    console.log('üöõ Inserindo rotas din√¢micas reais...');
    const rotasDinamicasInsertQuery = `
      DELETE FROM "${schemaName}".rotas_dinamicas WHERE tenant_id = $1;
      INSERT INTO "${schemaName}".rotas_dinamicas (
        tenant_id, ativo, nome_rota, id_rota, dias_semana, previsao_dias
      ) VALUES 
      ($1, true, 'Rota SP-Interior Di√°ria', 'RD-SP-INT-001', '["segunda", "terca", "quarta", "quinta", "sexta"]', 5),
      ($1, true, 'Rota RJ-SP Expressa', 'RD-RJ-SP-001', '["segunda", "quarta", "sexta"]', 3),
      ($1, true, 'Rota Santos-Capital', 'RD-ST-SP-001', '["terca", "quinta", "sabado"]', 7),
      ($1, true, 'Rota ABC Regional', 'RD-ABC-001', '["segunda", "terca", "quarta", "quinta", "sexta"]', 10),
      ($1, true, 'Rota Metropolitana', 'RD-METRO-001', '["segunda", "terca", "quarta", "quinta", "sexta", "sabado"]', 15);
    `;
    
    await pool.query(rotasDinamicasInsertQuery, [tenantId]);
    console.log('‚úÖ Rotas din√¢micas inseridas com sucesso');

    // 4. INSERIR TRECHOS REAIS  
    console.log('üìç Inserindo trechos reais...');
    
    // Primeiro buscar IDs dos locais criados
    const locaisResult = await pool.query(`
      SELECT id, nome FROM "${schemaName}".locais WHERE tenant_id = $1 ORDER BY nome
    `, [tenantId]);
    
    const locaisMap = {};
    locaisResult.rows.forEach(local => {
      locaisMap[local.nome] = local.id;
    });

    const trechosInsertQuery = `
      DELETE FROM "${schemaName}".trechos WHERE tenant_id = $1;
      INSERT INTO "${schemaName}".trechos (
        tenant_id, ativo, codigo_integracao, local_a_id, local_b_id
      ) VALUES 
      ($1, true, 'TRC-SP-RJ-001', $2, $3),
      ($1, true, 'TRC-SP-CP-001', $2, $4),
      ($1, true, 'TRC-SP-GU-001', $2, $5),
      ($1, true, 'TRC-SP-ST-001', $2, $6),
      ($1, true, 'TRC-RJ-CP-001', $3, $4);
    `;
    
    await pool.query(trechosInsertQuery, [
      tenantId,
      locaisMap['Sede S√£o Paulo'],
      locaisMap['Filial Rio de Janeiro'], 
      locaisMap['Centro Distribui√ß√£o Campinas'],
      locaisMap['Dep√≥sito Guarulhos'],
      locaisMap['Posto Avan√ßado Santos']
    ]);
    console.log('‚úÖ Trechos inseridos com sucesso');

    // 5. INSERIR ROTAS DE TRECHO REAIS
    console.log('üõ£Ô∏è Inserindo rotas de trecho reais...');
    const rotasTrechoInsertQuery = `
      DELETE FROM "${schemaName}".rotas_trecho WHERE tenant_id = $1;
      INSERT INTO "${schemaName}".rotas_trecho (
        tenant_id, ativo, id_rota, local_a_id, local_b_id
      ) VALUES 
      ($1, true, 'RT-SP-INTERIOR-001', $2, $3),
      ($1, true, 'RT-METROPOLITANA-001', $2, $4),
      ($1, true, 'RT-LITORAL-001', $2, $5);
    `;
    
    await pool.query(rotasTrechoInsertQuery, [
      tenantId,
      locaisMap['Sede S√£o Paulo'],
      locaisMap['Centro Distribui√ß√£o Campinas'],
      locaisMap['Dep√≥sito Guarulhos'],
      locaisMap['Posto Avan√ßado Santos']
    ]);
    console.log('‚úÖ Rotas de trecho inseridas com sucesso');

    // 6. INSERIR √ÅREAS REAIS
    console.log('üè¢ Inserindo √°reas reais...');
    const areasInsertQuery = `
      DELETE FROM "${schemaName}".areas WHERE tenant_id = $1;
      INSERT INTO "${schemaName}".areas (
        tenant_id, ativo, nome, descricao, codigo_integracao, tipo_area, cor_mapa
      ) VALUES 
      ($1, true, '√Årea Central SP', 'Regi√£o central de S√£o Paulo', 'AREA-SP-CENTRO-001', 'raio', '#FF6B6B'),
      ($1, true, '√Årea Zona Sul RJ', 'Zona Sul do Rio de Janeiro', 'AREA-RJ-ZS-001', 'coordenadas', '#4ECDC4'),
      ($1, true, '√Årea Industrial Campinas', 'Regi√£o industrial de Campinas', 'AREA-CP-IND-001', 'faixa_cep', '#45B7D1'),
      ($1, true, '√Årea Portu√°ria Santos', 'Regi√£o portu√°ria de Santos', 'AREA-ST-PORTO-001', 'raio', '#96CEB4'),
      ($1, true, '√Årea ABC Paulista', 'Regi√£o do ABC', 'AREA-ABC-001', 'coordenadas', '#FFEAA7');
    `;
    
    await pool.query(areasInsertQuery, [tenantId]);
    console.log('‚úÖ √Åreas inseridas com sucesso');

    // 7. INSERIR AGRUPAMENTOS REAIS
    console.log('üìã Inserindo agrupamentos reais...');
    
    // Buscar IDs das √°reas criadas
    const areasResult = await pool.query(`
      SELECT id, nome FROM "${schemaName}".areas WHERE tenant_id = $1 ORDER BY nome
    `, [tenantId]);
    
    const areasIds = areasResult.rows.map(area => area.id);

    const agrupamentosInsertQuery = `
      DELETE FROM "${schemaName}".agrupamentos WHERE tenant_id = $1;
      INSERT INTO "${schemaName}".agrupamentos (
        tenant_id, ativo, nome, descricao, codigo_integracao, areas_vinculadas
      ) VALUES 
      ($1, true, 'Agrupamento Sudeste', '√Åreas da regi√£o Sudeste', 'AGRUP-SE-001', $2),
      ($1, true, 'Agrupamento Metropolitano', '√Åreas metropolitanas principais', 'AGRUP-METRO-001', $3),
      ($1, true, 'Agrupamento Industrial', '√Åreas de concentra√ß√£o industrial', 'AGRUP-IND-001', $4);
    `;
    
    await pool.query(agrupamentosInsertQuery, [
      tenantId,
      JSON.stringify(areasIds.slice(0, 3)),
      JSON.stringify(areasIds.slice(1, 4)),
      JSON.stringify(areasIds.slice(2, 5))
    ]);
    console.log('‚úÖ Agrupamentos inseridos com sucesso');

    console.log('üéØ Todos os dados reais foram inseridos com sucesso!');
    console.log('üìä Mock data foi completamente removido e substitu√≠do por dados reais do banco');
    
  } catch (error) {
    console.error('‚ùå Erro ao inserir dados reais:', error);
    throw error;
  } finally {
    await pool.end();
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  insertRealLocationsData();
}

export { insertRealLocationsData };
