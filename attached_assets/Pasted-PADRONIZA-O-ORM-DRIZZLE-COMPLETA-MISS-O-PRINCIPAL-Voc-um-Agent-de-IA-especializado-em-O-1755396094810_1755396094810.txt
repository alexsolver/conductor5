PADRONIZA√á√ÉO ORM DRIZZLE COMPLETA

## üéØ MISS√ÉO PRINCIPAL
Voc√™ √© um **Agent de IA especializado em ORM Drizzle** com a miss√£o de **garantir 100% de padroniza√ß√£o** em todo o sistema Conductor. Seu trabalho √© **cr√≠tico** para a estabilidade e consist√™ncia arquitetural.

## üìã CONTEXTO DO SISTEMA

### Stack Tecnol√≥gico:
- **ORM**: Drizzle ORM com PostgreSQL
- **Arquitetura**: Clean Architecture + DDD
- **Schema Principal**: `/shared/schema-master.ts` (fonte √∫nica da verdade)
- **Re-export**: `/shared/schema.ts` ‚Üí re-exporta schema-master
- **Multi-tenancy**: Isolamento por tenant com schemas din√¢micos

### Estrutura Cr√≠tica:
```
shared/
‚îú‚îÄ‚îÄ schema-master.ts    ‚Üê FONTE √öNICA DA VERDADE
‚îú‚îÄ‚îÄ schema.ts          ‚Üê Re-export unificado
server/
‚îú‚îÄ‚îÄ db.ts              ‚Üê Configura√ß√£o principal
‚îú‚îÄ‚îÄ modules/           ‚Üê Clean Architecture
‚îî‚îÄ‚îÄ infrastructure/    ‚Üê Repositories
```

## üî• PADR√ïES OBRIGAT√ìRIOS DE IMPLEMENTA√á√ÉO

### 1. IMPORTS - SEMPRE USAR:
```typescript
// ‚úÖ CORRETO - SEMPRE
import { db, sql } from '@shared/schema';
import { users, tickets, customers } from '@shared/schema';

// ‚ùå NUNCA USAR
import { db } from '../db';
import { users } from './schema-master';
import { sql } from 'drizzle-orm';
```

### 2. TIPOS UUID - PADR√ÉO OBRIGAT√ìRIO:
```typescript
// ‚úÖ CORRETO
id: uuid("id").primaryKey().defaultRandom(),
tenantId: uuid("tenant_id").notNull(),

// ‚ùå NUNCA USAR
id: text("id").primaryKey(),
tenantId: varchar("tenant_id", { length: 36 }),
```

### 3. TIMESTAMPS - PADR√ÉO OBRIGAT√ìRIO:
```typescript
// ‚úÖ CORRETO
createdAt: timestamp("created_at").defaultNow().notNull(),
updatedAt: timestamp("updated_at").defaultNow().notNull(),

// ‚ùå NUNCA USAR
createdAt: timestamp("created_at"),
createdAt: timestamp("created_at", { withTimezone: true }),
```

### 4. SOFT DELETE - PADR√ÉO OBRIGAT√ìRIO:
```typescript
// ‚úÖ CORRETO - SEMPRE incluir
isActive: boolean("is_active").default(true).notNull(),

// ‚úÖ Para auditoria cr√≠tica
isDeleted: boolean("is_deleted").default(false),
deletedAt: timestamp("deleted_at"),
deletedBy: uuid("deleted_by").references(() => users.id),
```

### 5. TENANT ISOLATION - PADR√ÉO CR√çTICO:
```typescript
// ‚úÖ CORRETO - SEMPRE primeiro √≠ndice
index("table_tenant_idx").on(table.tenantId),
unique("table_tenant_unique").on(table.tenantId, table.someField),

// ‚úÖ Constraints de tenant
tenantId: uuid("tenant_id").notNull().references(() => tenants.id),
```

## üõ°Ô∏è VALIDA√á√ïES OBRIGAT√ìRIAS

### Repository Pattern - Clean Architecture:
```typescript
// ‚úÖ CORRETO - Sempre usar este padr√£o
export class DrizzleEntityRepository implements IEntityRepository {
  async findById(id: string): Promise<Entity | null> {
    try {
      const [result] = await db
        .select()
        .from(entities)
        .where(eq(entities.id, id));
      
      return result ? this.toDomain(result) : null;
    } catch (error) {
      logError('Repository error', error, { entityId: id });
      throw new Error(`Failed to find entity: ${id}`);
    }
  }

  private toDomain(data: any): Entity {
    return new Entity(
      data.id,
      data.name,
      data.tenantId,
      data.isActive ?? true,
      data.createdAt || new Date(),
      data.updatedAt || new Date()
    );
  }
}
```

### Query Pattern - SEMPRE com Tenant Isolation:
```typescript
// ‚úÖ CORRETO - Tenant isolation obrigat√≥rio
const results = await db
  .select()
  .from(tickets)
  .where(
    and(
      eq(tickets.tenantId, tenantId),
      eq(tickets.isActive, true)
    )
  )
  .orderBy(desc(tickets.createdAt));

// ‚ùå NUNCA ESQUECER tenant isolation
const results = await db.select().from(tickets); // PERIGOSO!
```

## üîç CHECKLIST DE VALIDA√á√ÉO - EXECUTE SEMPRE

### ‚úÖ Verifica√ß√µes Cr√≠ticas por Arquivo:

1. **Schema Definitions:**
   - [ ] Todos os IDs s√£o `uuid().defaultRandom()`
   - [ ] Todos t√™m `tenantId: uuid().notNull()`
   - [ ] Timestamps padronizados (createdAt, updatedAt)
   - [ ] Soft delete com `isActive: boolean().default(true)`
   - [ ] √çndices tenant-first sempre

2. **Repository Classes:**
   - [ ] Implementam interface Clean Architecture
   - [ ] Usam imports de `@shared/schema`
   - [ ] Tenant isolation em TODAS as queries
   - [ ] Error handling padronizado
   - [ ] Logs estruturados

3. **Use Cases:**
   - [ ] Recebem reposit√≥rios via DI
   - [ ] Valida√ß√£o de tenant obrigat√≥ria
   - [ ] Domain entities no retorno
   - [ ] Error handling consistente

4. **Controllers:**
   - [ ] JWT middleware aplicado
   - [ ] Tenant extraction do token
   - [ ] DTOs para input/output
   - [ ] Response padronizado

## üö® ANTI-PATTERNS - NUNCA PERMITIR

### ‚ùå Imports Fragmentados:
```typescript
// NUNCA FAZER
import { db } from '../../../db';
import { sql } from 'drizzle-orm';
import * as schema from '../shared/schema-master';
```

### ‚ùå SQL Raw sem Tenant Isolation:
```typescript
// PERIGOSO - NUNCA FAZER
await db.execute(sql`SELECT * FROM tickets WHERE id = ${id}`);
```

### ‚ùå Tipos Inconsistentes:
```typescript
// NUNCA MISTURAR
id: text("id"),           // ‚ùå
tenantId: varchar("tenant_id", { length: 36 }), // ‚ùå
```

### ‚ùå Queries sem Tenant:
```typescript
// CR√çTICO - NUNCA FAZER
await db.select().from(customers).where(eq(customers.id, id));
```

## üéØ INSTRU√á√ïES DE EXECU√á√ÉO

### FASE 1 - AN√ÅLISE:
1. Escaneie TODO o codebase procurando por:
   - Imports n√£o padronizados
   - Defini√ß√µes de schema inconsistentes
   - Queries sem tenant isolation
   - Tipos UUID/timestamp incorretos

### FASE 2 - CORRE√á√ÉO:
1. **Prioridade CR√çTICA**: Schema definitions
2. **Prioridade ALTA**: Repository patterns
3. **Prioridade M√âDIA**: Controllers e Use Cases
4. **Prioridade BAIXA**: Otimiza√ß√µes

### FASE 3 - VALIDA√á√ÉO:
1. Execute verifica√ß√£o de compila√ß√£o TypeScript
2. Teste conex√µes de banco
3. Valide tenant isolation
4. Confirme performance de queries

## üìä RELAT√ìRIO OBRIGAT√ìRIO

### Para cada arquivo modificado, forne√ßa:
```markdown
## Arquivo: [nome_do_arquivo]
### ‚ùå Problemas Encontrados:
- [ ] Import inconsistente de schema
- [ ] Tipo UUID/timestamp incorreto
- [ ] Falta tenant isolation
- [ ] Anti-pattern detectado

### ‚úÖ Corre√ß√µes Aplicadas:
- [x] Import padronizado para @shared/schema
- [x] Tipos UUID corrigidos
- [x] Tenant isolation implementado
- [x] Pattern Clean Architecture aplicado

### üîç Impacto:
- Seguran√ßa: [MELHORIA/MANUTEN√á√ÉO]
- Performance: [MELHORIA/MANUTEN√á√ÉO]
- Consist√™ncia: [MELHORIA/MANUTEN√á√ÉO]
```

## üöÄ EXECU√á√ÉO IMEDIATA

**Comece AGORA** escaneando os diret√≥rios na seguinte ordem:
1. `/shared/` - Schema definitions
2. `/server/infrastructure/repositories/` - Repository implementations
3. `/server/modules/*/application/` - Use Cases e Controllers
4. `/server/modules/*/infrastructure/` - Infrastructure implementations

**LEMBRE-SE**: Cada corre√ß√£o deve ser **100% backward compatible** e seguir **exatamente** os padr√µes definidos. ZERO toler√¢ncia para anti-patterns.

---

## üéØ RESULTADO ESPERADO
Ao final, **100% do codebase** deve estar padronizado com:
- ‚úÖ Imports unificados de `@shared/schema`
- ‚úÖ Tipos UUID/timestamp consistentes
- ‚úÖ Tenant isolation obrigat√≥rio
- ‚úÖ Clean Architecture respeitada
- ‚úÖ Zero anti-patterns
- ‚úÖ Performance otimizada

**COMECE AGORA!** üöÄ
