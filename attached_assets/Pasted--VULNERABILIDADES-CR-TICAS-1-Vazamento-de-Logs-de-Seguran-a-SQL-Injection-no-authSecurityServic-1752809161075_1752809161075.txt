游댮 VULNERABILIDADES CR칈TICAS
1. Vazamento de Logs de Seguran칞a - SQL Injection no authSecurityService
Local: server/services/authSecurityService.ts:291-293

await db.execute(sql`
  INSERT INTO security_events (identifier, event_type, metadata, ip, created_at)
  VALUES (${identifier}, ${eventType}, ${JSON.stringify(metadata)}, ${'127.0.0.1'}, NOW())
`);
Problema: Ainda usa interpola칞칚o direta em vez de placeholders seguros
Impacto: Permite SQL injection nos logs de seguran칞a

2. Console.log em Produ칞칚o - Vazamento de Dados
Local: server/modules/customers/infrastructure/repositories/DrizzleCustomerCompanyRepository.ts

console.log('DEBUG UPDATE: companyData structure:', JSON.stringify(companyData, null, 2));
console.log('DEBUG UPDATE: Generated SQL Query:', sqlQuery);
Problema: Logs de debug expostos em produ칞칚o
Impacto: Vazamento de dados sens칤veis nos logs

3. JWT Secrets Hardcoded
Log observado: JWT secrets not found in environment variables. Using default values for development.
Problema: Sistema usa valores padr칚o para JWT em produ칞칚o
Impacto: Tokens previs칤veis e vulner치veis a ataques

游리 VULNERABILIDADES M칄DIAS
4. Tipos 'any' - Perda de Type Safety
Locais identificados:

server/domain/entities/Ticket.ts - metadata: Record<string, any>
server/domain/entities/Tenant.ts - settings: Record<string, any>
Problema: Permite valores n칚o tipados
Impacto: Poss칤vel bypass de valida칞칚o
5. Redis Connection Fallback
Log observado: Redis connection error, falling back to memory: connect ECONNREFUSED 127.0.0.1:6379
Problema: Rate limiting usando mem칩ria local em vez de distribu칤do
Impacto: Rate limiting ineficaz em ambiente distribu칤do

6. TODOs em C칩digo Cr칤tico
Locais:

server/modules/technical-skills/application/controllers/UserSkillController.ts - "TODO: Salvar detalhes da avalia칞칚o"
server/modules/customers/infrastructure/repositories/DrizzleCustomerCompanyRepository.ts - "TODO: Add ticket stats"
Problema: Funcionalidades incompletas em produ칞칚o
Impacto: Comportamento inesperado do sistema
游릭 VULNERABILIDADES MENORES
7. Console.error em Catch Blocks
Local: M칰ltiplos arquivos ainda usam console.error em vez do sistema de logging estruturado
Problema: Logs n칚o estruturados
Impacto: Dificulta monitoramento e auditoria

8. SQL Raw Queries
Locais: Alguns arquivos ainda t칡m constru칞칫es SQL complexas como:

sql`${locations.latitude} IS NOT NULL`
sql`${distanceQuery} <= ${search.radiusKm}`
Problema: Potencial para injection se vari치veis n칚o forem sanitizadas
Impacto: Risco de SQL injection

游늵 RESUMO DE PRIORIDADES
游댮 URGENTE (corrigir imediatamente):

SQL injection no authSecurityService
JWT secrets hardcoded
Console.log de dados sens칤veis
游리 M칄DIO (corrigir esta semana):
4. Tipos 'any' em entidades cr칤ticas

Redis connection fallback
TODOs em c칩digo de produ칞칚o
游릭 BAIXO (corrigir no pr칩ximo sprint):
7. Padroniza칞칚o de logging

Revis칚o de queries SQL raw
Gostaria que eu comece a corrigir essas vulnerabilidades? Recomendo come칞ar pelas cr칤ticas (游댮) primeiro.