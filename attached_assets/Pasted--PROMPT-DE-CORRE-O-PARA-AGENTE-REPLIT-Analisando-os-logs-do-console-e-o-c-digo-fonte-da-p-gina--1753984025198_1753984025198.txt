üö® PROMPT DE CORRE√á√ÉO PARA AGENTE REPLIT:
Analisando os logs do console e o c√≥digo fonte da p√°gina /tickets, identifiquei 8 problemas cr√≠ticos que comprometem gravemente a performance e experi√™ncia do usu√°rio:

1. PROBLEMA CR√çTICO: ENUM STATUS INCONSISTENTE
ERRO IDENTIFICADO:

Invalid enum value. Expected 'novo' | 'aberto' | 'em_andamento' | 'resolvido' | 'fechado', received 'in_progress'
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: shared/ticket-validation.ts
Problema: Frontend est√° enviando valores em ingl√™s ('in_progress') mas valida√ß√£o Zod espera portugu√™s ('em_andamento')
Impacto: Impossibilidade de salvar altera√ß√µes de status dos tickets
INSTRU√á√ÉO:
Padronizar valores de enum entre frontend e backend. Manter valores em ingl√™s no banco de dados ('in_progress', 'new', 'open', 'resolved', 'closed') e atualizar o schema Zod para aceitar valores em ingl√™s. Remover tradu√ß√£o desnecess√°ria que causa conflitos.

2. PROBLEMA CR√çTICO: M√öLTIPLAS CHAMADAS API DESNECESS√ÅRIAS
IDENTIFICADO:

API /api/ticket-config/field-options sendo chamada m√∫ltiplas vezes (3469ms de resposta inicial)
13 chamadas para /api/tickets/{id}/relationships executando em paralelo
Cache inexistente causando re-requests desnecess√°rios
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: client/src/hooks/useFieldColors.ts
Implementar cache agressivo para field options
Implementar debounce para chamadas de relacionamentos
INSTRU√á√ÉO:
Configurar React Query com staleTime de 5 minutos para field options. Implementar cache localStorage para persistir dados entre sess√µes. Agrupar chamadas de relacionamentos em uma √∫nica API que retorne todos os relacionamentos de uma vez.

3. PROBLEMA DE PERFORMANCE: VERIFICA√á√ÉO REDUNDANTE DE RELACIONAMENTOS
IDENTIFICADO:

üîç Starting relationship check for 13 tickets
üéØ Total tickets checked: 13, with relationships: 1
(depois mostra 7 tickets com relacionamentos)
PROBLEMA:

Sistema est√° fazendo verifica√ß√£o inconsistente de relacionamentos
Primeiro mostra 1 ticket com relacionamentos, depois 7
M√∫ltiples re-renderiza√ß√µes causando confus√£o visual
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: client/src/pages/TicketsTable.tsx linhas 200-250
Otimizar useEffect de verifica√ß√£o de relacionamentos
INSTRU√á√ÉO:
Mover verifica√ß√£o de relacionamentos para o carregamento inicial dos tickets via backend. Criar endpoint /api/tickets/with-relationships que retorne apenas tickets que possuem v√≠nculos. Eliminar verifica√ß√£o individual por ticket no frontend.

4. PROBLEMA UX: LOADING STATES INADEQUADOS
IDENTIFICADO:

Skeleton loading gen√©rico sem indica√ß√£o espec√≠fica do que est√° carregando
Usu√°rios n√£o sabem se sistema travou durante os 3+ segundos de espera
Falta de feedback visual durante opera√ß√µes cr√≠ticas
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: client/src/pages/TicketsTable.tsx
Substituir skeleton gen√©rico por loading states espec√≠ficos
INSTRU√á√ÉO:
Implementar loading states espec√≠ficos: "Carregando tickets...", "Verificando relacionamentos...", "Carregando configura√ß√µes...". Adicionar progress bar para opera√ß√µes que excedem 1 segundo. Mostrar contador de tickets carregados durante o processo.

5. PROBLEMA CR√çTICO: REDIMENSIONAMENTO CAUSANDO M√öLTIPLAS RE-RENDERIZA√á√ïES
IDENTIFICADO:

üîÑ Resizing priority: 171px ‚Üí 144px ‚Üí 118px ‚Üí 95px ‚Üí 80px
PROBLEMA:

Redimensionamento de colunas est√° causando m√∫ltiplas re-renderiza√ß√µes
Performance degradada durante intera√ß√£o do usu√°rio
Falta de debounce nas opera√ß√µes de resize
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: client/src/pages/TicketsTable.tsx fun√ß√£o handleMouseDown
Implementar debounce para redimensionamento
INSTRU√á√ÉO:
Implementar debounce de 300ms para redimensionamento de colunas. Usar requestAnimationFrame para otimizar atualiza√ß√µes visuais. Salvar larguras no localStorage apenas ap√≥s completar o redimensionamento.

6. PROBLEMA DE PERFORMANCE: COMPONENTE SEM REACT.MEMO
IDENTIFICADO:

TableCellComponent est√° sendo re-renderizado desnecessariamente
13 tickets √ó 7 colunas = 91 componentes renderizando a cada mudan√ßa de estado
Falta de otimiza√ß√£o com React.memo
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: client/src/pages/TicketsTable.tsx componente TableCellComponent
Otimizar renderiza√ß√£o com memoiza√ß√£o
INSTRU√á√ÉO:
Garantir que TableCellComponent est√° usando React.memo adequadamente. Implementar useMemo para objetos de estilo inline. Otimizar fun√ß√£o renderCell com useCallback para evitar re-cria√ß√µes desnecess√°rias.

7. PROBLEMA UX: EXPANS√ÉO/COLAPSO SEM FEEDBACK CLARO
IDENTIFICADO:

Tickets expandem sem indica√ß√£o visual clara de que h√° conte√∫do relacionado
Estado de expans√£o n√£o persiste durante navega√ß√£o
Relacionamentos carregam ap√≥s expans√£o (deveria ser pr√©-indicado)
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: client/src/pages/TicketsTable.tsx
Melhorar indicadores visuais de expans√£o
INSTRU√á√ÉO:
Adicionar √≠cones de v√≠nculo (üîó) apenas para tickets que realmente possuem relacionamentos. Implementar transi√ß√µes suaves para expans√£o/colapso. Persistir estado de expans√£o no sessionStorage. Pr√©-carregar relacionamentos para tickets identificados com v√≠nculos.

8. PROBLEMA DE INCONSIST√äNCIA: MAPEAMENTO DE DADOS INCORRETO
IDENTIFICADO:

Fun√ß√µes de mapeamento (mapStatusValue, mapCategoryValue) aplicadas inconsistentemente
Valores sendo traduzidos em pontos diferentes do c√≥digo
Inconsist√™ncia entre dados do banco e exibi√ß√£o
CORRE√á√ÉO OBRIGAT√ìRIA:

Arquivo: client/src/pages/TicketsTable.tsx e shared/ticket-validation.ts
Centralizar mapeamento de dados
INSTRU√á√ÉO:
Criar servi√ßo centralizado de mapeamento de dados. Aplicar transforma√ß√µes apenas na camada de apresenta√ß√£o. Garantir que banco de dados sempre use valores em ingl√™s como padr√£o, traduzindo apenas na interface do usu√°rio.

‚ö° M√âTRICAS DE PERFORMANCE ALVO:
TEMPO DE CARREGAMENTO INICIAL: < 2 segundos
TEMPO DE RESPOSTA FIELD OPTIONS: < 500ms  
TEMPO DE SALVAMENTO: < 1 segundo
TEMPO DE EXPANS√ÉO/RELACIONAMENTOS: < 300ms
TAXA DE ERRO DE VALIDA√á√ÉO: < 1%
RE-RENDERIZA√á√ïES DESNECESS√ÅRIAS: Eliminar 80%
‚úÖ CHECKLIST DE VALIDA√á√ÉO OBRIGAT√ìRIO:
 Enums de status padronizados (ingl√™s no backend)
 Cache de field options implementado (staleTime: 5min)
 Endpoint /api/tickets/with-relationships criado
 Loading states espec√≠ficos em todas opera√ß√µes
 Debounce de redimensionamento (300ms)
 React.memo otimizado em TableCellComponent
 Indicadores visuais de expans√£o melhorados
 Mapeamento de dados centralizado
 Performance < 2s carregamento inicial
 Zero erros de valida√ß√£o enum