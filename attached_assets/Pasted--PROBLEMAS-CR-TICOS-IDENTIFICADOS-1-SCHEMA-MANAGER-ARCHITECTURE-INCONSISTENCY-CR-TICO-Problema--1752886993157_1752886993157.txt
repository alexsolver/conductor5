üî• PROBLEMAS CR√çTICOS IDENTIFICADOS
1. SCHEMA MANAGER ARCHITECTURE INCONSISTENCY - CR√çTICO
Problema: SchemaManager.ts em server/modules/shared/database/ apenas re-exporta, n√£o implementa
Localiza√ß√£o: server/modules/shared/database/SchemaManager.ts
Impacto: Falha na obten√ß√£o de conex√µes tenant (getTenantDatabase is not a function)
Evid√™ncia: Arquivo cont√©m apenas export { schemaManager } from "../../../db"
Status: ‚ùå BREAKING SYSTEM
2. DATABASE MANAGER SINGLETON BOTTLENECK - PERFORMANCE
Problema: Connection pool ultra-conservativo limitando escalabilidade
Configura√ß√£o Atual: MAX_TENANT_POOLS = 3, max: 1 per tenant
Impacto: Severe performance degradation sob load
Evid√™ncia: maxLifetimeSeconds: 120 for√ßa reconnections excessivas
Localiza√ß√£o: server/database/DatabaseManager.ts
3. TENANT VALIDATION CACHE INEFFICIENCY - PERFORMANCE
Problema: Cache TTL muito baixo causando valida√ß√µes excessivas
Configura√ß√£o: CACHE_TTL = 10 * 60 * 1000 (10 min)
Impacto: Overhead desnecess√°rio em tenant validation
Evid√™ncia: TenantValidator.ts linha 12
Frequ√™ncia: Re-valida√ß√£o a cada 10 minutos mesmo para tenants ativos
4. SCHEMA CREATION OVERHEAD - PERFORMANCE
Problema: Cria√ß√£o de 11+ tabelas por tenant com m√∫ltiplos indexes
Impacto: Overhead significativo na cria√ß√£o de novos tenants
Evid√™ncia: createTenantTables() executa 6+ queries separadas
Localiza√ß√£o: DatabaseManager.ts m√©todo createTenantTables()
5. CROSS-TENANT VALIDATOR PARAMETER BINDING - SEGURAN√áA
Problema: Queries usam interpola√ß√£o de string em alguns pontos
Impacto: Potencial SQL injection risk
Evid√™ncia: schemaName = 'tenant_${validatedId.replace(/-/g, '_')}'
Localiza√ß√£o: CrossTenantValidator.ts m√©todo validateResourceOwnership
6. MULTI-SCHEMA DUPLICATION - MANUTENIBILIDADE
Problema: 4 schemas diferentes com sobreposi√ß√£o funcional
Evid√™ncia: schema.ts, schema-simple.ts, schema-unified.ts, schema-backup.ts
Impacto: Complexidade de manuten√ß√£o e inconsist√™ncias
Localiza√ß√£o: /shared/schema/ directory
7. TENANT-SPECIFIC SCHEMA GENERATION OVERHEAD - PERFORMANCE
Problema: Schema generation din√¢mico sem cache eficiente
Evid√™ncia: getTenantSpecificSchema(schemaName) executa a cada request
Impacto: CPU overhead desnecess√°rio
Localiza√ß√£o: shared/schema/tenant-specific.ts
8. LEGACY SCHEMA MIGRATION COMPLEXITY - MANUTENIBILIDADE
Problema: Migration logic complexa usando raw SQL
Evid√™ncia: migrateLegacyTables() com DO $$ blocks
Impacto: Difficult to maintain and debug
Localiza√ß√£o: server/db.ts m√©todo migrateLegacyTables
9. CONNECTION CLEANUP AGGRESSIVE SETTINGS - STABILITY
Problema: Cleanup muito frequente pode causar instabilidade
Configura√ß√£o: Cleanup a cada 5 minutos
Evid√™ncia: startCleanupRoutine() interval de 5min
Impacto: Potential connection interruptions
10. TENANT CACHE INVALIDATION GAPS - CONSISTENCY
Problema: Cache pode ficar stale durante opera√ß√µes tenant
Evid√™ncia: schemaCache.clear() em cleanup, mas n√£o em updates
Impacto: Potential inconsistent data access
Localiza√ß√£o: DatabaseManager.ts m√©todo cleanupConnections