Baseado na an√°lise completa do c√≥digo do projeto, identifiquei m√∫ltiplas inconsist√™ncias cr√≠ticas no schema do banco de dados. Aqui est√° a an√°lise detalhada:

üîç AN√ÅLISE COMPLETA DE INCONSIST√äNCIAS NO SCHEMA
1. ARQUITETURA FRAGMENTADA CR√çTICA
1.1. M√∫ltiplos Arquivos de Schema Conflitantes
shared/schema.ts - Schema principal com estrutura consolidada
server/db.ts - L√≥gica de cria√ß√£o de tabelas via SQL raw
server/db-unified.ts - Schema alternativo com estrutura diferente
server/modules/shared/database/SchemaManager.ts - Queries SQL hardcoded
PROBLEMA CR√çTICO: N√£o h√° um ponto √∫nico de verdade para o schema.

2. INCONSIST√äNCIAS DE TIPOS DE DADOS
2.1. IDs Inconsistentes Entre Arquivos
// Em shared/schema.ts
tenantId: uuid("tenant_id").notNull()
// Em server/db.ts (linha 578)
tenant_id VARCHAR(36) NOT NULL
// INCONSIST√äNCIA: UUID vs VARCHAR(36)
2.2. Campos JSONB vs TEXT
// shared/schema.ts
metadata: jsonb("metadata").default({})
// server/modules/.../SchemaManager.ts (linha 89)
metadata TEXT
3. PROBLEMAS DE ESTRUTURA DE TABELAS
3.1. Conflito customers vs solicitantes
// shared/schema.ts define 'customers' com campos brasileiros
documento: varchar("documento", { length: 50 })
tipoPessoa: varchar("tipo_pessoa", { length: 20 })
// server/db-unified.ts define 'solicitantes'
solicitantes: { documento, tipo_pessoa }
// CONFLITO: Duas tabelas para a mesma entidade
3.2. Tabela favorecidos Definida M√∫ltiplas Vezes
-- Em server/db.ts (linhas 250-267)
CREATE TABLE favorecidos (
  id UUID PRIMARY KEY,
  tenant_id VARCHAR(36)
)
-- Em shared/schema.ts 
favorecidos = pgTable("favorecidos", {
  id: uuid("id").primaryKey(),
  tenantId: uuid("tenant_id")
})
4. INCONSIST√äNCIAS DE FOREIGN KEYS
4.1. Relacionamentos √ìrf√£os
// tickets referencia customers
customerId: uuid("customer_id").notNull()
// Mas algumas implementa√ß√µes usam solicitante_id
solicitante_id UUID REFERENCES solicitantes(id)
4.2. Foreign Keys Inconsistentes
-- Em alguns locais
FOREIGN KEY (customer_id) REFERENCES customers(id)
-- Em outros locais sem refer√™ncia adequada
customer_id UUID -- sem REFERENCES
5. PROBLEMAS DE VALIDA√á√ÉO E CONSTRAINTS
5.1. Constraints de tenant_id Inconsistentes
-- server/db.ts
CONSTRAINT customers_tenant_id_format CHECK (LENGTH(tenant_id) = 36)
-- Mas nem todas as tabelas t√™m essa valida√ß√£o
5.2. Unique Constraints Conflitantes
-- Algumas tabelas
UNIQUE (tenant_id, email)
-- Outras tabelas
UNIQUE (email) -- Pode causar problemas multi-tenant
6. PROBLEMAS DE √çNDICES
6.1. √çndices Duplicados ou Faltantes
-- Definidos m√∫ltiplas vezes
CREATE INDEX customers_tenant_email_idx
-- Faltam √≠ndices cr√≠ticos para performance
-- Relacionamentos sem √≠ndices adequados
7. INCONSIST√äNCIAS DE CAMPOS OBRIGAT√ìRIOS
7.1. tenant_id Opcional vs Obrigat√≥rio
// shared/schema.ts
tenantId: uuid("tenant_id").notNull()
// server/modules/SchemaManager.ts
tenant_id VARCHAR(36) -- sem NOT NULL em alguns casos
8. PROBLEMAS DE MIGRA√á√ÉO AUTO-HEALING
8.1. L√≥gica Conflitante
// server/db.ts tem auto-healing que pode conflitar
await this.migrateLegacyTables(schemaName)
// Mas shared/schema.ts n√£o prev√™ essa migra√ß√£o
8.2. Valida√ß√£o de Tabelas Inconsistente
// Valida 17 tabelas em alguns locais
const requiredTables = ['customers', 'tickets'...] // 17 itens
// Mas apenas 6 em outros
table_name IN ('solicitantes', 'favorecidos', 'tickets'...) // 6 itens
9. INCONSIST√äNCIAS DE NOMENCLATURA
9.1. Padr√µes Mistos
// Portugu√™s vs Ingl√™s
'solicitantes' vs 'customers'
'favorecidos' vs 'external_contacts'
9.2. Conven√ß√µes de Naming
-- Alguns com underscores
customer_companies
-- Outros com camelCase no c√≥digo
customerCompanies
10. PROBLEMAS DE CONFIGURA√á√ÉO DRIZZLE
10.1. Schema Path Inconsistente
// drizzle.config.ts aponta para
schema: "./shared/schema.ts"
// Mas sistema usa m√∫ltiplos schemas
11. ERRO CR√çTICO ATUAL
11.1. Unterminated String Literal
ERROR: Unterminated string literal
/server/index.ts:1:71
CAUSA: Provavelmente aspas n√£o fechadas em algum arquivo de configura√ß√£o do schema.

RECOMENDA√á√ïES CR√çTICAS
üö® CONSOLIDA√á√ÉO URGENTE: Escolher shared/schema.ts como √∫nica fonte de verdade
üîß PADRONIZA√á√ÉO: UUID para todos os IDs, JSONB para metadados
üõ°Ô∏è INTEGRIDADE: Implementar foreign keys consistentes
üìä PERFORMANCE: Criar √≠ndices padronizados tenant-first
üèóÔ∏è MIGRA√á√ÉO: Sistema de migra√ß√£o controlado
‚úÖ VALIDA√á√ÉO: Constraints obrigat√≥rios para isolamento multi-tenant
