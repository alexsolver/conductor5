> const { neon } = require('@neondatabase/serverless');
> const fs = require('fs');
> 
> async function createTicketRelationships() {
>   const sql = neon(process.env.DATABASE_URL);
>   
>   try {
>     // Buscar todos os schemas de tenant
>     const schemas = await sql\`
>       SELECT DISTINCT schemaname 
>       FROM pg_tables 
>       WHERE schemaname LIKE 'tenant_%'
>     \`;
>     
>     console.log(\`Encontrados \${schemas.length} schemas de tenant\`);
>     
>     for (const schema of schemas) {
>       const schemaName = schema.schemaname;
>       console.log(\`Criando ticket_relationships no schema: \${schemaName}\`);
>       
>       await sql\`
>         CREATE TABLE IF NOT EXISTS \${sql(schemaName)}.ticket_relationships (
>           id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
>           tenant_id UUID NOT NULL,
>           source_ticket_id UUID NOT NULL,
>           target_ticket_id UUID NOT NULL,
>           relationship_type VARCHAR(50) NOT NULL,
>           description TEXT,
>           created_by_id UUID,
>           created_at TIMESTAMP DEFAULT NOW(),
>           updated_at TIMESTAMP DEFAULT NOW(),
>           is_active BOOLEAN DEFAULT true,
> 
>           CONSTRAINT fk_ticket_relationships_source FOREIGN KEY (source_ticket_id) REFERENCES \${sql(schemaName)}.tickets(id) ON DELETE CASCADE,
>           CONSTRAINT fk_ticket_relationships_target FOREIGN KEY (target_ticket_id) REFERENCES \${sql(schemaName)}.tickets(id) ON DELETE CASCADE,
>           CONSTRAINT fk_ticket_relationships_created_by FOREIGN KEY (created_by_id) REFERENCES public.users(id),
> 
>           CONSTRAINT chk_no_self_reference CHECK (source_ticket_id != target_ticket_id),
> 
>           CONSTRAINT uk_ticket_relationships UNIQUE (tenant_id, source_ticket_id, target_ticket_id, relationship_type)
>         )
>       \`;
>       
>       // Criar índices
>       await sql\`CREATE INDEX IF NOT EXISTS idx_ticket_relationships_source ON \${sql(schemaName)}.ticket_relationships(tenant_id, source_ticket_id)\`;
>       await sql\`CREATE INDEX IF NOT EXISTS idx_ticket_relationships_target ON \${sql(schemaName)}.ticket_relationships(tenant_id, target_ticket_id)\`;
>       await sql\`CREATE INDEX IF NOT EXISTS idx_ticket_relationships_type ON \${sql(schemaName)}.ticket_relationships(relationship_type)\`;
>       await sql\`CREATE INDEX IF NOT EXISTS idx_ticket_relationships_active ON \${sql(schemaName)}.ticket_relationships(tenant_id, is_active)\`;
>       
>     } console.log(\`✅ Tabela criada com sucesso no schema: \${schemaName}\`); 
>     
>     console.log('✅ Todas as tabelas ticket_relationships foram criadas com sucesso');
>   } catch (error) {
>     console.error('❌ Erro ao criar tabela:', error.message);
>     console.error(error);
>   }
> }
> 
> createTicketRelationships();
> "
Encontrados 4 schemas de tenant
Criando ticket_relationships no schema: tenant_78a4c88e_0e85_4f7c_ad92_f472dad50d7a
❌ Erro ao criar tabela: syntax error at or near "$1"
NeonDbError: syntax error at or near "$1"
    at execute (/home/runner/workspace/node_modules/@neondatabase/serverless/index.js:1559:55)
    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async createTicketRelationships ([eval]:22:7) {
  severity: 'ERROR',
  code: '42601',
  detail: undefined,
  hint: undefined,
  position: '37',
  internalPosition: undefined,
  internalQuery: undefined,
  where: undefined,
  schema: undefined,
  table: undefined,
  column: undefined,
  dataType: undefined,
  constraint: undefined,
  file: 'scan.l',
  line: '1244',
  routine: 'scanner_yyerror',
  sourceError: undefined