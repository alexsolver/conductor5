CONTEXTO CRÍTICO: Sistema multi-tenant com violações ATIVAS de isolamento de schema detectadas em logs em tempo real. Ferramentas de proteção existem mas estão INATIVAS.

PROBLEMAS ESPECÍFICOS DETECTADOS:
1. Employment detection middleware recebendo user object vazio: [EMPLOYMENT-DETECTION] Input user: {}
2. Loop infinito de requisições /api/timecard/current-status sem validação tenant adequada
3. TenantSchemaEnforcer, TenantSchemaMonitor e TenantSchemaUsageAuditor existem mas NÃO ESTÃO SENDO USADOS
4. Queries executando potencialmente sem tenant_id, risco de vazamento entre tenants

ARQUIVOS CRÍTICOS IDENTIFICADOS:
- server/middleware/tenantSchemaEnforcer.ts (PRONTO, NÃO APLICADO)
- server/services/TenantSchemaMonitor.ts (PRONTO, NÃO INICIADO)
- server/scripts/TenantSchemaUsageAuditor.ts (PRONTO, NÃO EXECUTADO)
- server/middleware/employmentDetectionMiddleware.ts (QUEBRADO - user vazio)
- server/routes.ts (SEM ENFORCEMENT ATIVO)

SOLUÇÃO REQUERIDA - ATIVE AS FERRAMENTAS EXISTENTES:

1. EXECUTE IMEDIATAMENTE o script de auditoria existente:
   - Rodar server/scripts/runTenantSchemaAudit.ts para relatório completo de violações

2. ATIVE o enforcement nas rotas principais:
   - Aplicar tenantSchemaEnforcer() no server/routes.ts em TODAS as rotas que precisam de tenant context
   - Garantir que middleware chain preserve user.tenantId

3. INICIE o monitoramento contínuo:
   - Ativar TenantSchemaMonitor.startMonitoring() no startup
   - Configurar alertas para violações em tempo real

4. CORRIJA o middleware quebrado:
   - Resolver employmentDetectionMiddleware para nunca receber user object vazio
   - Garantir cadeia de autenticação íntegra

5. IMPLEMENTE proteções obrigatórias:
   - Toda operação de banco DEVE validar tenant_id
   - db.execute/select/insert/update/delete DEVEM ter WHERE tenant_id = ${tenantId}
   - Rejeitar operações sem contexto tenant válido

6. ADICIONE debounce/validação nas APIs problemáticas:
   - /api/timecard/current-status com rate limiting e validação tenant
   - Evitar loops infinitos de requisições

VALIDAÇÕES CRÍTICAS OBRIGATÓRIAS:
- User object NUNCA pode ser {} em contextos que precisam de tenant
- Toda query DEVE ter tenant_id explícito ou ser rejeitada
- Monitoramento DEVE alertar violações em tempo real
- Enforcement DEVE estar ativo em produção

EXECUTE estas correções mantendo a arquitetura existente e ATIVANDO as ferramentas de segurança já implementadas mas inativas.