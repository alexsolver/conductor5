import { Request, Response, NextFunction, Router } from 'express';
import crypto from 'crypto';

export interface CSPDirectives {
  'default-src'?: string[];
  'script-src'?: string[];
  'style-src'?: string[];
  'img-src'?: string[];
  'font-src'?: string[];
  'connect-src'?: string[];
  'media-src'?: string[];
  'object-src'?: string[];
  'frame-src'?: string[];
  'worker-src'?: string[];
  'child-src'?: string[];
  'form-action'?: string[];
  'frame-ancestors'?: string[];
  'base-uri'?: string[];
  'manifest-src'?: string[];
  'prefetch-src'?: string[];
  'upgrade-insecure-requests'?: boolean;
  'block-all-mixed-content'?: boolean;
  'report-uri'?: string[];
  'report-to'?: string[];
}

export class CSPBuilder {
  private directives: CSPDirectives = {};
  
  constructor(baseDirectives?: CSPDirectives) {
    if (baseDirectives) {
      this.directives = { ...baseDirectives };
    }
  }

  addDirective(directive: keyof CSPDirectives, values: string[] | boolean): CSPBuilder {
    if (typeof values === 'boolean') {
      (this.directives[directive] as any) = values;
    } else {
      (this.directives[directive] as any) = [
        ...(this.directives[directive] as string[] || []),
        ...values
      ];
    }
    return this;
  }

  removeDirective(directive: keyof CSPDirectives): CSPBuilder {
    delete this.directives[directive];
    return this;
  }

  build(): string {
    const parts: string[] = [];
    
    Object.entries(this.directives).forEach(([key, value]) => {
      if (typeof value === 'boolean' && value) {
        parts.push(key);
      } else if (Array.isArray(value) && value.length > 0) {
        parts.push(`${key} ${value.join(' ')}`);
      }
    });

    return parts.join('; ');
  }
}

// Environment-specific CSP configurations
export const CSP_CONFIGS = {
  development: {
    'default-src': ["'self'"],
    'script-src': [
      "'self'",
      "'unsafe-inline'",
      "'unsafe-eval'",
      "blob:",
      "*.replit.dev",
      "*.replit.app",
      "ws://localhost:*",
      "wss://localhost:*"
    ],
    'style-src': [
      "'self'",
      "'unsafe-inline'",
      "*.googleapis.com",
      "*.gstatic.com"
    ],
    'img-src': [
      "'self'",
      "data:",
      "blob:",
      "*.replit.dev",
      "*.replit.app",
      "*.unsplash.com",
      "*.googleapis.com"
    ],
    'font-src': [
      "'self'",
      "*.googleapis.com",
      "*.gstatic.com",
      "data:"
    ],
    'connect-src': [
      "'self'",
      "ws://localhost:*",
      "wss://localhost:*",
      "*.replit.dev",
      "*.replit.app",
      "*.googleapis.com",
      "*.google.com"
    ],
    'worker-src': [
      "'self'",
      "blob:"
    ],
    'frame-src': [
      "'self'",
      "*.replit.dev",
      "*.replit.app"
    ]
  },
  production: {
    'default-src': ["'self'"],
    'script-src': [
      "'self'",
      "'wasm-unsafe-eval'",
      "blob:",
      "*.replit.app"
    ],
    'style-src': [
      "'self'",
      "'unsafe-inline'",
      "*.googleapis.com",
      "*.gstatic.com"
    ],
    'img-src': [
      "'self'",
      "data:",
      "blob:",
      "*.replit.app",
      "*.unsplash.com",
      "*.googleapis.com"
    ],
    'font-src': [
      "'self'",
      "*.googleapis.com",
      "*.gstatic.com",
      "data:"
    ],
    'connect-src': [
      "'self'",
      "wss://*.replit.app",
      "*.replit.app",
      "*.googleapis.com",
      "*.google.com"
    ],
    'worker-src': [
      "'self'",
      "blob:"
    ],
    'frame-ancestors': ["'none'"],
    'upgrade-insecure-requests': true,
    'block-all-mixed-content': true
  }
};

// Generate nonce for inline scripts and styles
export function generateNonce(): string {
  return crypto.randomBytes(16).toString('base64');
}

// CSP middleware factory
export function createCSPMiddleware(customConfig?: CSPDirectives) {
  return (req: Request, res: Response, next: NextFunction) => {
    const environment = process.env.NODE_ENV || 'development';
    const baseConfig = CSP_CONFIGS[environment as keyof typeof CSP_CONFIGS] || CSP_CONFIGS.development;
    
    // Generate nonce for this request
    const nonce = generateNonce();
    res.locals.nonce = nonce;
    
    // Build CSP with custom configuration
    const cspBuilder = new CSPBuilder(baseConfig);
    
    if (customConfig) {
      Object.entries(customConfig).forEach(([directive, values]) => {
        if (values !== undefined) {
          cspBuilder.addDirective(directive as keyof CSPDirectives, values);
        }
      });
    }
    
    // Add nonce to script-src and style-src
    cspBuilder.addDirective('script-src', [`'nonce-${nonce}'`]);
    cspBuilder.addDirective('style-src', [`'nonce-${nonce}'`]);
    
    const cspHeader = cspBuilder.build();
    res.setHeader('Content-Security-Policy', cspHeader);
    
    // Additional security headers
    res.setHeader('X-Frame-Options', 'DENY');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    
    next();
  };
}

// Default CSP middleware
export const cspMiddleware = createCSPMiddleware();

// Strict CSP for sensitive operations
export const strictCSPMiddleware = createCSPMiddleware({
  'script-src': ["'self'"],
  'style-src': ["'self'", "'unsafe-inline'"],
  'img-src': ["'self'", "data:"],
  'connect-src': ["'self'"],
  'font-src': ["'self'"],
  'object-src': ["'none'"],
  'frame-src': ["'none'"],
  'frame-ancestors': ["'none'"],
  'base-uri': ["'self'"],
  'form-action': ["'self'"]
});

// Relaxed CSP for development/admin panels
export const relaxedCSPMiddleware = createCSPMiddleware({
  'script-src': ["'self'", "'unsafe-inline'", "'unsafe-eval'"],
  'style-src': ["'self'", "'unsafe-inline'"],
  'img-src': ["'self'", "data:", "blob:", "*"],
  'connect-src': ["'self'", "*"]
});

// CSP reporting endpoint
export const cspReportRouter = Router();

cspReportRouter.post('/csp-report', (req: Request, res: Response) => {
  try {
    const report = req.body;
    console.warn('CSP Violation Report:', JSON.stringify(report, null, 2));
    
    // Here you could log to your monitoring system
    // Example: logger.warn('CSP Violation', { report, userAgent: req.get('User-Agent') });
    
    res.status(204).send();
  } catch (error) {
    console.error('Error processing CSP report:', error);
    res.status(400).json({ error: 'Invalid report format' });
  }
});