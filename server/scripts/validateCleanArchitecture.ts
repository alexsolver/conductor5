#!/usr/bin/env node
/**
 * SCRIPT PRINCIPAL - VALIDA√á√ÉO CLEAN ARCHITECTURE
 * 
 * Executa valida√ß√£o completa e gera plano de corre√ß√£o autom√°tico
 * 
 * Uso:
 *   npx tsx server/scripts/validateCleanArchitecture.ts          # Apenas valida√ß√£o
 *   npx tsx server/scripts/validateCleanArchitecture.ts --fix    # Valida√ß√£o + corre√ß√µes autom√°ticas
 *   npx tsx server/scripts/validateCleanArchitecture.ts --report # Relat√≥rio detalhado
 */

import { CleanArchitectureValidator } from './CleanArchitectureValidator';
import { CleanArchitectureCorrector } from './ImplementCleanArchitectureCorrections';
import { writeFileSync, mkdirSync, existsSync } from 'fs';

class CleanArchitectureOrchestrator {

  async run(): Promise<void> {
    const args = process.argv.slice(2);
    const shouldFix = args.includes('--fix');
    const detailedReport = args.includes('--report');
    const quiet = args.includes('--quiet');

    if (!quiet) {
      this.printHeader();
    }

    try {
      // 1. Executar valida√ß√£o
      const validator = new CleanArchitectureValidator();
      const validationResult = await validator.validateCompleteArchitecture();

      if (!quiet) {
        validator.generateDetailedReport(validationResult);
      }

      // 2. Se h√° problemas, gerar plano de corre√ß√£o
      if (validationResult.issues && validationResult.issues.length > 0) {
        const corrector = new CleanArchitectureCorrector();
        let correctionPlans: any[] = [];
        
        try {
          correctionPlans = await corrector.generateCorrectionPlan(validationResult);
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro ao gerar plano de corre√ß√£o:', error);
          correctionPlans = [];
        }
        
        if (shouldFix) {
          console.log('\nüîß Executando corre√ß√µes autom√°ticas...');
          await corrector.executeCorrectionPlan(correctionPlans, true);
          
          // Re-executar valida√ß√£o ap√≥s corre√ß√µes
          console.log('\nüîç Re-executando valida√ß√£o ap√≥s corre√ß√µes...');
          const newValidationResult = await validator.validateCompleteArchitecture();
          
          if (!quiet) {
            validator.generateDetailedReport(newValidationResult);
          }
        }

        // 4. Salvar relat√≥rios
        try {
          this.saveReports(validationResult, correctionPlans || []);
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro ao salvar relat√≥rios:', error);
        }

        // 5. Status de sa√≠da
        process.exit(validationResult.passed ? 0 : 1);

      } else {
        if (!quiet) {
          console.log('\nüéâ PARAB√âNS! Arquitetura Clean 100% em conformidade!');
        }
        process.exit(0);
      }

    } catch (error) {
      console.error('‚ùå Erro durante valida√ß√£o:', error);
      process.exit(1);
    }
  }

  private printHeader(): void {
    console.log('');
    console.log('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà');
    console.log('‚ñà                                               ‚ñà');
    console.log('‚ñà        CLEAN ARCHITECTURE VALIDATOR          ‚ñà');
    console.log('‚ñà                                               ‚ñà');
    console.log('‚ñà  Valida√ß√£o Completa + Corre√ß√£o Autom√°tica    ‚ñà');
    console.log('‚ñà                                               ‚ñà');
    console.log('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà');
    console.log('');
  }

  private saveReports(validationResult: any, correctionPlans: any[]): void {
    // Ensure reports directory exists
    if (!existsSync('reports')) {
      mkdirSync('reports', { recursive: true });
    }

    // Salvar resultado da valida√ß√£o
    writeFileSync(
      'reports/clean-architecture-validation-result.json',
      JSON.stringify(validationResult, null, 2)
    );

    // Salvar plano de corre√ß√£o
    writeFileSync(
      'reports/clean-architecture-correction-plan.json',
      JSON.stringify(correctionPlans, null, 2)
    );

    // Criar relat√≥rio resumido em markdown
    const markdownReport = this.generateMarkdownReport(validationResult, correctionPlans);
    writeFileSync('reports/CLEAN_ARCHITECTURE_REPORT.md', markdownReport);

    console.log('\nüìÑ Relat√≥rios salvos em:');
    console.log('   - reports/clean-architecture-validation-result.json');
    console.log('   - reports/clean-architecture-correction-plan.json');
    console.log('   - reports/CLEAN_ARCHITECTURE_REPORT.md');
  }

  private generateMarkdownReport(validationResult: any, correctionPlans: any[]): string {
    const timestamp = new Date().toISOString().split('T')[0];

    return `# Clean Architecture Validation Report

**Data:** ${timestamp}  
**Score:** ${validationResult.score}/100  
**Status:** ${validationResult.passed ? '‚úÖ APROVADO' : '‚ùå REPROVADO'}

## Resumo de Problemas

- üî• **Cr√≠ticos:** ${validationResult.summary.critical}
- ‚ö†Ô∏è **Altos:** ${validationResult.summary.high}
- üìã **M√©dios:** ${validationResult.summary.medium}
- üí° **Baixos:** ${validationResult.summary.low}
- **Total:** ${validationResult.summary.total}

## Principais Problemas por M√≥dulo

${this.generateModuleProblemsMarkdown(validationResult.issues)}

## Plano de Corre√ß√£o

${this.generateCorrectionPlanMarkdown(correctionPlans)}

## Recomenda√ß√µes

### Prioridade Imediata üî•
${correctionPlans && correctionPlans.length > 0
  ? correctionPlans
      .filter(p => p && p.priority === 'immediate')
      .map(p => `- **${p.module || 'M√≥dulo'}:** ${(p.actions || []).length} a√ß√µes (${p.estimatedTime || 'tempo n√£o estimado'})`)
      .join('\n') || 'Nenhuma a√ß√£o imediata necess√°ria'
  : 'Nenhuma a√ß√£o imediata necess√°ria'}

### Prioridade Alta ‚ö†Ô∏è
${correctionPlans && correctionPlans.length > 0
  ? correctionPlans
      .filter(p => p && p.priority === 'high')
      .map(p => `- **${p.module || 'M√≥dulo'}:** ${(p.actions || []).length} a√ß√µes (${p.estimatedTime || 'tempo n√£o estimado'})`)
      .join('\n') || 'Nenhuma a√ß√£o de alta prioridade necess√°ria'
  : 'Nenhuma a√ß√£o de alta prioridade necess√°ria'}

## Comandos para Corre√ß√£o

\`\`\`bash
# Validar arquitetura
npm run validate:architecture

# Aplicar corre√ß√µes autom√°ticas
npm run validate:architecture --fix

# Gerar relat√≥rio detalhado
npm run validate:architecture --report
\`\`\`

---
*Relat√≥rio gerado automaticamente pelo Clean Architecture Validator*
`;
  }

  private generateModuleProblemsMarkdown(issues: any[]): string {
    if (!issues || !Array.isArray(issues) || issues.length === 0) {
      return 'Nenhum problema encontrado por m√≥dulo.';
    }

    const moduleIssues = issues.reduce((acc, issue) => {
      if (issue && issue.module) {
        if (!acc[issue.module]) acc[issue.module] = [];
        acc[issue.module].push(issue);
      }
      return acc;
    }, {});

    return Object.entries(moduleIssues)
      .map(([module, moduleIssues]: [string, any]) => {
        const critical = moduleIssues.filter(i => i.severity === 'critical').length;
        const high = moduleIssues.filter(i => i.severity === 'high').length;
        const status = critical > 0 ? 'üî•' : high > 0 ? '‚ö†Ô∏è' : 'üìã';

        return `### ${status} ${module}
- **Total de problemas:** ${moduleIssues.length}
- **Cr√≠ticos:** ${critical} | **Altos:** ${high}
- **Principais problemas:**
${moduleIssues.slice(0, 3).map(i => `  - ${i.description}`).join('\n')}
`;
      })
      .join('\n');
  }

  private generateCorrectionPlanMarkdown(plans: any[]): string {
    if (!plans || plans.length === 0) {
      return 'Nenhum plano de corre√ß√£o dispon√≠vel.';
    }

    return plans
      .filter(plan => plan && typeof plan === 'object')
      .map(plan => {
        const priorityEmoji = {
          immediate: 'üî•',
          high: '‚ö†Ô∏è',  
          medium: 'üìã',
          low: 'üí°'
        }[plan.priority] || 'üìã';

        const actions = plan.actions || [];
        const module = plan.module || 'M√≥dulo desconhecido';
        const priority = plan.priority || 'indefinida';
        const estimatedTime = plan.estimatedTime || 'n√£o estimado';

        return `### ${priorityEmoji} ${module}
- **Prioridade:** ${priority}
- **Tempo estimado:** ${estimatedTime}
- **A√ß√µes:** ${actions.length}

${actions.map((action: any, index: number) => {
  const actionType = action?.type || 'A√ß√£o';
  const actionDescription = action?.description || 'Descri√ß√£o n√£o dispon√≠vel';
  return `${index + 1}. **${actionType}:** ${actionDescription}`;
}).join('\n')}
`;
      })
      .join('\n');
  }
}

// Executar valida√ß√£o
const orchestrator = new CleanArchitectureOrchestrator();
orchestrator.run().catch(console.error);