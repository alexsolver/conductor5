const fs = require("fs");
const { Client } = require("pg");

console.log("üîß [GENERATE-SQL-ALTERAR] Iniciando script simples...");

// Verificar se o arquivo existe
const schemaFile = "./migrations/pg-migrations/tenant/001_create_tenant_tables.sql";

if (!fs.existsSync(schemaFile)) {
  console.error("‚ùå Arquivo n√£o encontrado:", schemaFile);
  console.log("üìÅ Conte√∫do do diret√≥rio migrations:");
  try {
    const files = fs.readdirSync("./migrations/pg-migrations/tenant/");
    console.log(files);
  } catch (err) {
    console.error("Erro ao listar diret√≥rio:", err.message);
  }
  process.exit(1);
}

console.log("‚úÖ Arquivo encontrado:", schemaFile);

// Ler arquivo
let sql;
try {
  sql = fs.readFileSync(schemaFile, "utf8");
  console.log("‚úÖ Arquivo lido com sucesso");
  console.log("üìÑ Primeiras 200 chars:", sql.substring(0, 200));
} catch (error) {
  console.error("‚ùå Erro ao ler arquivo:", error.message);
  process.exit(1);
}

// Parser simples para extrair CREATE TABLE
function extractTables(sqlContent) {
  const tables = {};

  // Regex para encontrar CREATE TABLE
  const tableMatches = sqlContent.match(/CREATE\s+TABLE\s+(?:IF\s+NOT\s+EXISTS\s+)?(\w+)\s*\(([\s\S]*?)\);/gi);

  if (!tableMatches) {
    console.log("‚ö†Ô∏è Nenhuma tabela CREATE TABLE encontrada");
    return tables;
  }

  console.log(`üìä Encontradas ${tableMatches.length} tabelas`);

  tableMatches.forEach(match => {
    const nameMatch = match.match(/CREATE\s+TABLE\s+(?:IF\s+NOT\s+EXISTS\s+)?(\w+)/i);
    if (nameMatch) {
      const tableName = nameMatch[1];
      tables[tableName] = { found: true };
      console.log(`üîç Tabela encontrada: ${tableName}`);
    }
  });

  return tables;
}

const schemaMap = extractTables(sql);
console.log("‚úÖ Schema parseado:", Object.keys(schemaMap));

// Conectar no banco se houver vari√°vel de ambiente
if (!process.env.DATABASE_URL) {
  console.log("‚ö†Ô∏è DATABASE_URL n√£o configurada, apenas validando arquivo");
  console.log("üéâ Valida√ß√£o do arquivo SQL conclu√≠da com sucesso!");
  process.exit(0);
}

// Se chegou aqui, tenta conectar no banco
const client = new Client({ 
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function run() {
  try {
    console.log("üîÑ Conectando ao banco...");
    await client.connect();
    console.log("‚úÖ Conectado ao banco");

    // Buscar schemas tenant
    const schemasRes = await client.query(
      `SELECT schema_name 
       FROM information_schema.schemata 
       WHERE schema_name LIKE 'tenant_%'`
    );

    console.log(`üîç Encontrados ${schemasRes.rows.length} schemas tenant`);

    if (schemasRes.rows.length === 0) {
      console.log("‚ö†Ô∏è Nenhum schema tenant encontrado");
      return;
    }

    // Para cada schema, mostrar as tabelas existentes
    for (const row of schemasRes.rows) {
      const schemaName = row.schema_name;
      console.log(`\nüîπ Schema: ${schemaName}`);

      const tablesRes = await client.query(
        `SELECT table_name 
         FROM information_schema.tables 
         WHERE table_schema = $1`,
        [schemaName]
      );

      console.log(`  üìã Tabelas existentes: ${tablesRes.rows.map(r => r.table_name).join(', ')}`);
    }

    console.log("\nüéâ An√°lise conclu√≠da!");
  } catch (error) {
    console.error("‚ùå Erro durante execu√ß√£o:", error.message);
  } finally {
    try {
      await client.end();
      console.log("‚úÖ Conex√£o fechada");
    } catch (error) {
      console.log("‚ö†Ô∏è Erro ao fechar conex√£o:", error.message);
    }
  }
}

run();