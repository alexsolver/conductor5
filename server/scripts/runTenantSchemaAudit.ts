
import { tenantSchemaAuditor } from './TenantSchemaUsageAuditor';

async function runCompleteAudit() {
  console.log('üîç [TENANT-SCHEMA-AUDIT] Iniciando auditoria completa do sistema...');
  
  try {
    // 1. Run complete system audit
    const auditResult = await tenantSchemaAuditor.auditCompleteSystem();
    
    // 2. Display results
    console.log('\nüìä [AUDIT-RESULTS] Resultado da Auditoria:');
    console.log('===============================================');
    console.log(`Total de viola√ß√µes: ${auditResult.summary.total}`);
    console.log(`Cr√≠ticas: ${auditResult.summary.critical}`);
    console.log(`Altas: ${auditResult.summary.high}`);
    console.log(`M√©dias: ${auditResult.summary.medium}`);
    console.log(`Baixas: ${auditResult.summary.low}`);
    
    console.log('\nüìù [VIOLATIONS-BY-TYPE] Viola√ß√µes por tipo:');
    for (const [type, count] of Object.entries(auditResult.summary.types)) {
      console.log(`  ${type}: ${count}`);
    }
    
    // 3. Show detailed violations
    if (auditResult.violations.length > 0) {
      console.log('\n‚ö†Ô∏è [DETAILED-VIOLATIONS] Viola√ß√µes detalhadas:');
      console.log('===============================================');
      
      for (const violation of auditResult.violations.slice(0, 10)) { // Show first 10
        console.log(`\n${violation.type}:`);
        if (violation.file) {
          console.log(`  Arquivo: ${violation.file}`);
        }
        if (violation.violations) {
          for (const subViolation of violation.violations) {
            console.log(`    - Linha ${subViolation.line}: ${subViolation.match} (${subViolation.severity})`);
          }
        }
      }
      
      if (auditResult.violations.length > 10) {
        console.log(`\n... e mais ${auditResult.violations.length - 10} viola√ß√µes`);
      }
    }
    
    // 4. Show fixes
    if (auditResult.fixes.length > 0) {
      console.log('\nüîß [SUGGESTED-FIXES] Corre√ß√µes sugeridas:');
      console.log('===============================================');
      
      for (const fix of auditResult.fixes.slice(0, 15)) { // Show first 15
        console.log(`  - ${fix}`);
      }
      
      if (auditResult.fixes.length > 15) {
        console.log(`\n... e mais ${auditResult.fixes.length - 15} corre√ß√µes sugeridas`);
      }
    }
    
    // 5. Install prevention measures
    console.log('\nüõ°Ô∏è [PREVENTION] Instalando medidas preventivas...');
    await tenantSchemaAuditor.installPreventionMeasures();
    
    // 6. Start continuous monitoring
    console.log('\nüîÑ [MONITORING] Iniciando monitoramento cont√≠nuo...');
    await tenantSchemaAuditor.startContinuousMonitoring();
    
    // 7. Final summary
    console.log('\n‚úÖ [AUDIT-COMPLETE] Auditoria completa finalizada!');
    console.log('===============================================');
    
    if (auditResult.summary.critical > 0) {
      console.log(`üö® A√á√ÉO NECESS√ÅRIA: ${auditResult.summary.critical} viola√ß√µes cr√≠ticas precisam ser corrigidas IMEDIATAMENTE!`);
      process.exit(1);
    } else if (auditResult.summary.high > 0) {
      console.log(`‚ö†Ô∏è ATEN√á√ÉO: ${auditResult.summary.high} viola√ß√µes de alta prioridade precisam ser corrigidas.`);
    } else if (auditResult.violations.length === 0) {
      console.log('üéâ PERFEITO: Nenhuma viola√ß√£o de schema tenant encontrada!');
    }
    
  } catch (error) {
    console.error('‚ùå [AUDIT-ERROR] Erro durante auditoria:', error);
    process.exit(1);
  }
}

// Execute if called directly
if (require.main === module) {
  runCompleteAudit();
}

export { runCompleteAudit };
