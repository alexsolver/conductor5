/**
 * ARCHITECTURE UNIFICATION VALIDATOR
 * 
 * Verifica e valida que a fragmenta√ß√£o cr√≠tica foi completamente resolvida
 * Identifica qualquer resqu√≠cio de defini√ß√µes conflitantes de schema
 */

import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

export class ArchitectureUnificationValidator {
  
  static validateComplete(): boolean {
    console.log('üîç EXECUTANDO VALIDA√á√ÉO COMPLETA DE UNIFICA√á√ÉO...');
    
    const issues: string[] = [];
    
    // 1. Verificar se arquivos fragmentados foram removidos
    const fragmentedFiles = [
      'server/db-broken.ts',
      'server/db-emergency.ts',
      'server/storage-broken.ts', 
      'server/storage-backup.ts',
      'server/storage-old.ts',
      '@shared/schema-broken.ts',
      'server/modules/shared/database/SchemaManager.ts'
    ];
    
    for (const file of fragmentedFiles) {
      if (existsSync(join(process.cwd(), file))) {
        issues.push(`‚ùå FRAGMENTO N√ÉO REMOVIDO: ${file}`);
      } else {
        console.log(`‚úÖ Fragmento removido: ${file}`);
      }
    }
    
    // 2. Verificar fonte √∫nica de verdade
    const masterSchemaPath = join(process.cwd(), '@shared/schema.ts');
    console.log(`üîç Verificando: ${masterSchemaPath}`);
    if (!existsSync(masterSchemaPath)) {
      issues.push('‚ùå CR√çTICO: @shared/schema.ts n√£o encontrado');
    } else {
      console.log('‚úÖ Fonte √∫nica de verdade: @shared/schema.ts existe');
      
      const content = readFileSync(masterSchemaPath, 'utf8');
      if (!content.includes('export const customers') || 
          !content.includes('export const tickets') ||
          !content.includes('export const users')) {
        issues.push('‚ùå CR√çTICO: Tabelas essenciais ausentes no schema master');
      } else {
        console.log('‚úÖ Tabelas essenciais presentes no schema master');
      }
    }
    
    // 3. Verificar proxy re-export
    const proxyPath = join(process.cwd(), 'shared/schema.ts');
    if (existsSync(proxyPath)) {
      const content = readFileSync(proxyPath, 'utf8');
      if (!content.includes('export * from '@shared/schema';')) {
        issues.push('‚ùå PROXY: shared/schema.ts n√£o re-exporta corretamente');
      } else {
        console.log('‚úÖ Proxy re-export configurado corretamente');
      }
    }
    
    // 4. Verificar db.ts unificado
    const dbPath = join(process.cwd(), 'server/db.ts');
    if (existsSync(dbPath)) {
      const content = readFileSync(dbPath, 'utf8');
      if (!content.includes('import * as schema from "@shared/schema"')) {
        issues.push('‚ùå DB: server/db.ts n√£o usa schema unificado');
      } else {
        console.log('‚úÖ Database manager usa schema unificado');
      }
    }
    
    // 5. Verificar documenta√ß√£o
    const docPath = join(process.cwd(), 'UNIFIED_SCHEMA_ARCHITECTURE.md');
    console.log(`üîç Verificando doc: ${docPath}`);
    if (!existsSync(docPath)) {
      issues.push('‚ùå DOC: Documenta√ß√£o de arquitetura unificada ausente');
    } else {
      console.log('‚úÖ Documenta√ß√£o de arquitetura unificada criada');
    }
    
    // Resultado final
    if (issues.length === 0) {
      console.log('\nüéØ ARQUITETURA COMPLETAMENTE UNIFICADA ‚úÖ');
      console.log('- Zero fragmentos de schema restantes');
      console.log('- Fonte √∫nica de verdade operacional');
      console.log('- Sistema de re-export funcional');
      console.log('- Documenta√ß√£o completa');
      return true;
    } else {
      console.log('\n‚ùå PROBLEMAS DE UNIFICA√á√ÉO IDENTIFICADOS:');
      issues.forEach(issue => console.log(issue));
      return false;
    }
  }
  
  static generateArchitectureReport(): void {
    console.log('\nüìä RELAT√ìRIO DE ARQUITETURA UNIFICADA:');
    
    const files = [
      { path: '@shared/schema.ts', role: 'Fonte √∫nica de verdade' },
      { path: 'shared/schema.ts', role: 'Proxy re-export' },
      { path: 'server/db.ts', role: 'Database manager unificado' },
      { path: 'UNIFIED_SCHEMA_ARCHITECTURE.md', role: 'Documenta√ß√£o' }
    ];
    
    files.forEach(file => {
      const exists = existsSync(join(process.cwd(), file.path));
      const status = exists ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${file.path} - ${file.role}`);
    });
    
    console.log('\nüèóÔ∏è ARQUITETURA FINAL:');
    console.log('   @shared/schema.ts  (FONTE √öNICA)');
    console.log('         ‚Üë');
    console.log('   shared/schema.ts         (PROXY)');
    console.log('         ‚Üë');
    console.log('   server/db.ts             (MANAGER)');
    console.log('         ‚Üë');
    console.log('   Todos os m√≥dulos         (CONSUMO)');
  }
}

// Executar valida√ß√£o
const isValid = ArchitectureUnificationValidator.validateComplete();
ArchitectureUnificationValidator.generateArchitectureReport();

if (!isValid) {
  process.exit(1);
}