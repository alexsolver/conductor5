
// Script para enviar notifica√ß√£o de teste - Corrigido
console.log('üîî Iniciando teste de notifica√ß√£o...');

async function sendTestNotificationFixed() {
  try {
    console.log('üì® Enviando notifica√ß√£o de teste com campos corretos...');
    
    // Use um token v√°lido do browser ou fa√ßa login antes
    const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1NTBlODQwMC1lMjliLTQxZDQtYTcxNi00NDY2NTU0NDAwMDEiLCJlbWFpbCI6ImFsZXhAbGFuc29sdmVyLmNvbSIsInRlbmFudElkIjoiM2Y5OTQ2MmYtMzYyMS00YjFiLWJlYTgtNzgyYWNjNTBkNjJlIiwiaWF0IjoxNzM3OTc3MDExLCJleHAiOjE3Mzc5ODA2MTF9.abc123';
    
    const notificationData = {
      // Campos obrigat√≥rios conforme a API
      tenantId: '3f99462f-3621-4b1b-bea8-782acc50d62e',
      userId: '550e8400-e29b-41d4-a716-446655440001', // User ID do alex@lansolver.com
      title: 'Teste de Notifica√ß√£o',
      message: 'Esta √© uma notifica√ß√£o de teste enviada para alex@lansolver.com',
      
      // Campos opcionais
      type: 'system_maintenance',
      severity: 'medium',
      channels: ['in_app'],
      data: {
        email: 'alex@lansolver.com',
        testType: 'manual_test',
        timestamp: new Date().toISOString(),
        source: 'notification_test_script_fixed'
      }
    };
    
    console.log('üì§ Dados da notifica√ß√£o:', JSON.stringify(notificationData, null, 2));
    
    const response = await fetch('http://localhost:5000/api/notifications', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
        'X-Tenant-ID': '3f99462f-3621-4b1b-bea8-782acc50d62e'
      },
      body: JSON.stringify(notificationData)
    });

    console.log('üìä Status da resposta:', response.status);
    
    const result = await response.json();
    console.log('üìß Resultado completo:', JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log('‚úÖ Notifica√ß√£o criada com sucesso!');
      console.log('üìù ID da notifica√ß√£o:', result.data?.id);
    } else {
      console.log('‚ùå Falha ao criar notifica√ß√£o:', result.message || result.error);
      
      // Debug adicional
      if (response.status === 400) {
        console.log('üîç Erro 400 - Bad Request. Verifique os campos obrigat√≥rios:');
        console.log('- tenantId:', notificationData.tenantId ? '‚úÖ' : '‚ùå');
        console.log('- userId:', notificationData.userId ? '‚úÖ' : '‚ùå');
        console.log('- title:', notificationData.title ? '‚úÖ' : '‚ùå');
        console.log('- message:', notificationData.message ? '‚úÖ' : '‚ùå');
      }
    }
  } catch (error) {
    console.log('‚ùå Erro ao enviar notifica√ß√£o:', error.message);
    console.log('üîç Stack trace:', error.stack);
  }
}

// Fun√ß√£o alternativa para testar com login primeiro
async function testWithLogin() {
  try {
    console.log('üîë Tentando fazer login primeiro...');
    
    const loginResponse = await fetch('http://localhost:5000/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'alex@lansolver.com',
        password: 'admin123' // Tente diferentes senhas
      })
    });

    const loginData = await loginResponse.json();
    console.log('üìä Login response:', JSON.stringify(loginData, null, 2));
    
    if (loginData.success && loginData.data?.tokens?.accessToken) {
      console.log('‚úÖ Login realizado com sucesso');
      const token = loginData.data.tokens.accessToken;
      
      // Usar token v√°lido para criar notifica√ß√£o
      await sendNotificationWithToken(token);
    } else {
      console.log('‚ùå Falha no login, usando m√©todo direto...');
      await sendTestNotificationFixed();
    }
  } catch (error) {
    console.log('‚ùå Erro durante login:', error.message);
    await sendTestNotificationFixed();
  }
}

async function sendNotificationWithToken(token) {
  const notificationData = {
    tenantId: '3f99462f-3621-4b1b-bea8-782acc50d62e',
    userId: '550e8400-e29b-41d4-a716-446655440001',
    title: 'Teste de Notifica√ß√£o com Token V√°lido',
    message: 'Esta √© uma notifica√ß√£o de teste enviada com token v√°lido para alex@lansolver.com',
    type: 'system_maintenance',
    severity: 'medium',
    channels: ['in_app']
  };
  
  const response = await fetch('http://localhost:5000/api/notifications', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
      'X-Tenant-ID': '3f99462f-3621-4b1b-bea8-782acc50d62e'
    },
    body: JSON.stringify(notificationData)
  });

  const result = await response.json();
  console.log('üìß Resultado com token v√°lido:', JSON.stringify(result, null, 2));
}

// Executar teste
console.log('üöÄ Executando teste de notifica√ß√£o...');
testWithLogin();
